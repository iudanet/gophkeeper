// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"github.com/iudanet/gophkeeper/internal/models"
	"sync"
)

// Ensure, that CRDTStorageMock does implement CRDTStorage.
// If this is not the case, regenerate this file with moq.
var _ CRDTStorage = &CRDTStorageMock{}

// CRDTStorageMock is a mock implementation of CRDTStorage.
//
//	func TestSomethingThatUsesCRDTStorage(t *testing.T) {
//
//		// make and configure a mocked CRDTStorage
//		mockedCRDTStorage := &CRDTStorageMock{
//			ClearFunc: func(ctx context.Context) error {
//				panic("mock out the Clear method")
//			},
//			DeleteEntryFunc: func(ctx context.Context, id string, timestamp int64, nodeID string) error {
//				panic("mock out the DeleteEntry method")
//			},
//			GetActiveEntriesFunc: func(ctx context.Context) ([]*models.CRDTEntry, error) {
//				panic("mock out the GetActiveEntries method")
//			},
//			GetAllEntriesFunc: func(ctx context.Context) ([]*models.CRDTEntry, error) {
//				panic("mock out the GetAllEntries method")
//			},
//			GetEntriesAfterTimestampFunc: func(ctx context.Context, timestamp int64) ([]*models.CRDTEntry, error) {
//				panic("mock out the GetEntriesAfterTimestamp method")
//			},
//			GetEntriesByTypeFunc: func(ctx context.Context, dataType string) ([]*models.CRDTEntry, error) {
//				panic("mock out the GetEntriesByType method")
//			},
//			GetEntryFunc: func(ctx context.Context, id string) (*models.CRDTEntry, error) {
//				panic("mock out the GetEntry method")
//			},
//			GetMaxTimestampFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the GetMaxTimestamp method")
//			},
//			SaveEntryFunc: func(ctx context.Context, entry *models.CRDTEntry) error {
//				panic("mock out the SaveEntry method")
//			},
//		}
//
//		// use mockedCRDTStorage in code that requires CRDTStorage
//		// and then make assertions.
//
//	}
type CRDTStorageMock struct {
	// ClearFunc mocks the Clear method.
	ClearFunc func(ctx context.Context) error

	// DeleteEntryFunc mocks the DeleteEntry method.
	DeleteEntryFunc func(ctx context.Context, id string, timestamp int64, nodeID string) error

	// GetActiveEntriesFunc mocks the GetActiveEntries method.
	GetActiveEntriesFunc func(ctx context.Context) ([]*models.CRDTEntry, error)

	// GetAllEntriesFunc mocks the GetAllEntries method.
	GetAllEntriesFunc func(ctx context.Context) ([]*models.CRDTEntry, error)

	// GetEntriesAfterTimestampFunc mocks the GetEntriesAfterTimestamp method.
	GetEntriesAfterTimestampFunc func(ctx context.Context, timestamp int64) ([]*models.CRDTEntry, error)

	// GetEntriesByTypeFunc mocks the GetEntriesByType method.
	GetEntriesByTypeFunc func(ctx context.Context, dataType string) ([]*models.CRDTEntry, error)

	// GetEntryFunc mocks the GetEntry method.
	GetEntryFunc func(ctx context.Context, id string) (*models.CRDTEntry, error)

	// GetMaxTimestampFunc mocks the GetMaxTimestamp method.
	GetMaxTimestampFunc func(ctx context.Context) (int64, error)

	// SaveEntryFunc mocks the SaveEntry method.
	SaveEntryFunc func(ctx context.Context, entry *models.CRDTEntry) error

	// calls tracks calls to the methods.
	calls struct {
		// Clear holds details about calls to the Clear method.
		Clear []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// DeleteEntry holds details about calls to the DeleteEntry method.
		DeleteEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Timestamp is the timestamp argument value.
			Timestamp int64
			// NodeID is the nodeID argument value.
			NodeID string
		}
		// GetActiveEntries holds details about calls to the GetActiveEntries method.
		GetActiveEntries []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllEntries holds details about calls to the GetAllEntries method.
		GetAllEntries []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetEntriesAfterTimestamp holds details about calls to the GetEntriesAfterTimestamp method.
		GetEntriesAfterTimestamp []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Timestamp is the timestamp argument value.
			Timestamp int64
		}
		// GetEntriesByType holds details about calls to the GetEntriesByType method.
		GetEntriesByType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DataType is the dataType argument value.
			DataType string
		}
		// GetEntry holds details about calls to the GetEntry method.
		GetEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetMaxTimestamp holds details about calls to the GetMaxTimestamp method.
		GetMaxTimestamp []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SaveEntry holds details about calls to the SaveEntry method.
		SaveEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Entry is the entry argument value.
			Entry *models.CRDTEntry
		}
	}
	lockClear                    sync.RWMutex
	lockDeleteEntry              sync.RWMutex
	lockGetActiveEntries         sync.RWMutex
	lockGetAllEntries            sync.RWMutex
	lockGetEntriesAfterTimestamp sync.RWMutex
	lockGetEntriesByType         sync.RWMutex
	lockGetEntry                 sync.RWMutex
	lockGetMaxTimestamp          sync.RWMutex
	lockSaveEntry                sync.RWMutex
}

// Clear calls ClearFunc.
func (mock *CRDTStorageMock) Clear(ctx context.Context) error {
	if mock.ClearFunc == nil {
		panic("CRDTStorageMock.ClearFunc: method is nil but CRDTStorage.Clear was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClear.Lock()
	mock.calls.Clear = append(mock.calls.Clear, callInfo)
	mock.lockClear.Unlock()
	return mock.ClearFunc(ctx)
}

// ClearCalls gets all the calls that were made to Clear.
// Check the length with:
//
//	len(mockedCRDTStorage.ClearCalls())
func (mock *CRDTStorageMock) ClearCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClear.RLock()
	calls = mock.calls.Clear
	mock.lockClear.RUnlock()
	return calls
}

// DeleteEntry calls DeleteEntryFunc.
func (mock *CRDTStorageMock) DeleteEntry(ctx context.Context, id string, timestamp int64, nodeID string) error {
	if mock.DeleteEntryFunc == nil {
		panic("CRDTStorageMock.DeleteEntryFunc: method is nil but CRDTStorage.DeleteEntry was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ID        string
		Timestamp int64
		NodeID    string
	}{
		Ctx:       ctx,
		ID:        id,
		Timestamp: timestamp,
		NodeID:    nodeID,
	}
	mock.lockDeleteEntry.Lock()
	mock.calls.DeleteEntry = append(mock.calls.DeleteEntry, callInfo)
	mock.lockDeleteEntry.Unlock()
	return mock.DeleteEntryFunc(ctx, id, timestamp, nodeID)
}

// DeleteEntryCalls gets all the calls that were made to DeleteEntry.
// Check the length with:
//
//	len(mockedCRDTStorage.DeleteEntryCalls())
func (mock *CRDTStorageMock) DeleteEntryCalls() []struct {
	Ctx       context.Context
	ID        string
	Timestamp int64
	NodeID    string
} {
	var calls []struct {
		Ctx       context.Context
		ID        string
		Timestamp int64
		NodeID    string
	}
	mock.lockDeleteEntry.RLock()
	calls = mock.calls.DeleteEntry
	mock.lockDeleteEntry.RUnlock()
	return calls
}

// GetActiveEntries calls GetActiveEntriesFunc.
func (mock *CRDTStorageMock) GetActiveEntries(ctx context.Context) ([]*models.CRDTEntry, error) {
	if mock.GetActiveEntriesFunc == nil {
		panic("CRDTStorageMock.GetActiveEntriesFunc: method is nil but CRDTStorage.GetActiveEntries was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetActiveEntries.Lock()
	mock.calls.GetActiveEntries = append(mock.calls.GetActiveEntries, callInfo)
	mock.lockGetActiveEntries.Unlock()
	return mock.GetActiveEntriesFunc(ctx)
}

// GetActiveEntriesCalls gets all the calls that were made to GetActiveEntries.
// Check the length with:
//
//	len(mockedCRDTStorage.GetActiveEntriesCalls())
func (mock *CRDTStorageMock) GetActiveEntriesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetActiveEntries.RLock()
	calls = mock.calls.GetActiveEntries
	mock.lockGetActiveEntries.RUnlock()
	return calls
}

// GetAllEntries calls GetAllEntriesFunc.
func (mock *CRDTStorageMock) GetAllEntries(ctx context.Context) ([]*models.CRDTEntry, error) {
	if mock.GetAllEntriesFunc == nil {
		panic("CRDTStorageMock.GetAllEntriesFunc: method is nil but CRDTStorage.GetAllEntries was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllEntries.Lock()
	mock.calls.GetAllEntries = append(mock.calls.GetAllEntries, callInfo)
	mock.lockGetAllEntries.Unlock()
	return mock.GetAllEntriesFunc(ctx)
}

// GetAllEntriesCalls gets all the calls that were made to GetAllEntries.
// Check the length with:
//
//	len(mockedCRDTStorage.GetAllEntriesCalls())
func (mock *CRDTStorageMock) GetAllEntriesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllEntries.RLock()
	calls = mock.calls.GetAllEntries
	mock.lockGetAllEntries.RUnlock()
	return calls
}

// GetEntriesAfterTimestamp calls GetEntriesAfterTimestampFunc.
func (mock *CRDTStorageMock) GetEntriesAfterTimestamp(ctx context.Context, timestamp int64) ([]*models.CRDTEntry, error) {
	if mock.GetEntriesAfterTimestampFunc == nil {
		panic("CRDTStorageMock.GetEntriesAfterTimestampFunc: method is nil but CRDTStorage.GetEntriesAfterTimestamp was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Timestamp int64
	}{
		Ctx:       ctx,
		Timestamp: timestamp,
	}
	mock.lockGetEntriesAfterTimestamp.Lock()
	mock.calls.GetEntriesAfterTimestamp = append(mock.calls.GetEntriesAfterTimestamp, callInfo)
	mock.lockGetEntriesAfterTimestamp.Unlock()
	return mock.GetEntriesAfterTimestampFunc(ctx, timestamp)
}

// GetEntriesAfterTimestampCalls gets all the calls that were made to GetEntriesAfterTimestamp.
// Check the length with:
//
//	len(mockedCRDTStorage.GetEntriesAfterTimestampCalls())
func (mock *CRDTStorageMock) GetEntriesAfterTimestampCalls() []struct {
	Ctx       context.Context
	Timestamp int64
} {
	var calls []struct {
		Ctx       context.Context
		Timestamp int64
	}
	mock.lockGetEntriesAfterTimestamp.RLock()
	calls = mock.calls.GetEntriesAfterTimestamp
	mock.lockGetEntriesAfterTimestamp.RUnlock()
	return calls
}

// GetEntriesByType calls GetEntriesByTypeFunc.
func (mock *CRDTStorageMock) GetEntriesByType(ctx context.Context, dataType string) ([]*models.CRDTEntry, error) {
	if mock.GetEntriesByTypeFunc == nil {
		panic("CRDTStorageMock.GetEntriesByTypeFunc: method is nil but CRDTStorage.GetEntriesByType was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DataType string
	}{
		Ctx:      ctx,
		DataType: dataType,
	}
	mock.lockGetEntriesByType.Lock()
	mock.calls.GetEntriesByType = append(mock.calls.GetEntriesByType, callInfo)
	mock.lockGetEntriesByType.Unlock()
	return mock.GetEntriesByTypeFunc(ctx, dataType)
}

// GetEntriesByTypeCalls gets all the calls that were made to GetEntriesByType.
// Check the length with:
//
//	len(mockedCRDTStorage.GetEntriesByTypeCalls())
func (mock *CRDTStorageMock) GetEntriesByTypeCalls() []struct {
	Ctx      context.Context
	DataType string
} {
	var calls []struct {
		Ctx      context.Context
		DataType string
	}
	mock.lockGetEntriesByType.RLock()
	calls = mock.calls.GetEntriesByType
	mock.lockGetEntriesByType.RUnlock()
	return calls
}

// GetEntry calls GetEntryFunc.
func (mock *CRDTStorageMock) GetEntry(ctx context.Context, id string) (*models.CRDTEntry, error) {
	if mock.GetEntryFunc == nil {
		panic("CRDTStorageMock.GetEntryFunc: method is nil but CRDTStorage.GetEntry was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetEntry.Lock()
	mock.calls.GetEntry = append(mock.calls.GetEntry, callInfo)
	mock.lockGetEntry.Unlock()
	return mock.GetEntryFunc(ctx, id)
}

// GetEntryCalls gets all the calls that were made to GetEntry.
// Check the length with:
//
//	len(mockedCRDTStorage.GetEntryCalls())
func (mock *CRDTStorageMock) GetEntryCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetEntry.RLock()
	calls = mock.calls.GetEntry
	mock.lockGetEntry.RUnlock()
	return calls
}

// GetMaxTimestamp calls GetMaxTimestampFunc.
func (mock *CRDTStorageMock) GetMaxTimestamp(ctx context.Context) (int64, error) {
	if mock.GetMaxTimestampFunc == nil {
		panic("CRDTStorageMock.GetMaxTimestampFunc: method is nil but CRDTStorage.GetMaxTimestamp was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetMaxTimestamp.Lock()
	mock.calls.GetMaxTimestamp = append(mock.calls.GetMaxTimestamp, callInfo)
	mock.lockGetMaxTimestamp.Unlock()
	return mock.GetMaxTimestampFunc(ctx)
}

// GetMaxTimestampCalls gets all the calls that were made to GetMaxTimestamp.
// Check the length with:
//
//	len(mockedCRDTStorage.GetMaxTimestampCalls())
func (mock *CRDTStorageMock) GetMaxTimestampCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetMaxTimestamp.RLock()
	calls = mock.calls.GetMaxTimestamp
	mock.lockGetMaxTimestamp.RUnlock()
	return calls
}

// SaveEntry calls SaveEntryFunc.
func (mock *CRDTStorageMock) SaveEntry(ctx context.Context, entry *models.CRDTEntry) error {
	if mock.SaveEntryFunc == nil {
		panic("CRDTStorageMock.SaveEntryFunc: method is nil but CRDTStorage.SaveEntry was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Entry *models.CRDTEntry
	}{
		Ctx:   ctx,
		Entry: entry,
	}
	mock.lockSaveEntry.Lock()
	mock.calls.SaveEntry = append(mock.calls.SaveEntry, callInfo)
	mock.lockSaveEntry.Unlock()
	return mock.SaveEntryFunc(ctx, entry)
}

// SaveEntryCalls gets all the calls that were made to SaveEntry.
// Check the length with:
//
//	len(mockedCRDTStorage.SaveEntryCalls())
func (mock *CRDTStorageMock) SaveEntryCalls() []struct {
	Ctx   context.Context
	Entry *models.CRDTEntry
} {
	var calls []struct {
		Ctx   context.Context
		Entry *models.CRDTEntry
	}
	mock.lockSaveEntry.RLock()
	calls = mock.calls.SaveEntry
	mock.lockSaveEntry.RUnlock()
	return calls
}
