// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"sync"
)

// Ensure, that MetadataStorageMock does implement MetadataStorage.
// If this is not the case, regenerate this file with moq.
var _ MetadataStorage = &MetadataStorageMock{}

// MetadataStorageMock is a mock implementation of MetadataStorage.
//
//	func TestSomethingThatUsesMetadataStorage(t *testing.T) {
//
//		// make and configure a mocked MetadataStorage
//		mockedMetadataStorage := &MetadataStorageMock{
//			GetLastSyncTimestampFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the GetLastSyncTimestamp method")
//			},
//			SaveLastSyncTimestampFunc: func(ctx context.Context, timestamp int64) error {
//				panic("mock out the SaveLastSyncTimestamp method")
//			},
//		}
//
//		// use mockedMetadataStorage in code that requires MetadataStorage
//		// and then make assertions.
//
//	}
type MetadataStorageMock struct {
	// GetLastSyncTimestampFunc mocks the GetLastSyncTimestamp method.
	GetLastSyncTimestampFunc func(ctx context.Context) (int64, error)

	// SaveLastSyncTimestampFunc mocks the SaveLastSyncTimestamp method.
	SaveLastSyncTimestampFunc func(ctx context.Context, timestamp int64) error

	// calls tracks calls to the methods.
	calls struct {
		// GetLastSyncTimestamp holds details about calls to the GetLastSyncTimestamp method.
		GetLastSyncTimestamp []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SaveLastSyncTimestamp holds details about calls to the SaveLastSyncTimestamp method.
		SaveLastSyncTimestamp []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Timestamp is the timestamp argument value.
			Timestamp int64
		}
	}
	lockGetLastSyncTimestamp  sync.RWMutex
	lockSaveLastSyncTimestamp sync.RWMutex
}

// GetLastSyncTimestamp calls GetLastSyncTimestampFunc.
func (mock *MetadataStorageMock) GetLastSyncTimestamp(ctx context.Context) (int64, error) {
	if mock.GetLastSyncTimestampFunc == nil {
		panic("MetadataStorageMock.GetLastSyncTimestampFunc: method is nil but MetadataStorage.GetLastSyncTimestamp was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetLastSyncTimestamp.Lock()
	mock.calls.GetLastSyncTimestamp = append(mock.calls.GetLastSyncTimestamp, callInfo)
	mock.lockGetLastSyncTimestamp.Unlock()
	return mock.GetLastSyncTimestampFunc(ctx)
}

// GetLastSyncTimestampCalls gets all the calls that were made to GetLastSyncTimestamp.
// Check the length with:
//
//	len(mockedMetadataStorage.GetLastSyncTimestampCalls())
func (mock *MetadataStorageMock) GetLastSyncTimestampCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetLastSyncTimestamp.RLock()
	calls = mock.calls.GetLastSyncTimestamp
	mock.lockGetLastSyncTimestamp.RUnlock()
	return calls
}

// SaveLastSyncTimestamp calls SaveLastSyncTimestampFunc.
func (mock *MetadataStorageMock) SaveLastSyncTimestamp(ctx context.Context, timestamp int64) error {
	if mock.SaveLastSyncTimestampFunc == nil {
		panic("MetadataStorageMock.SaveLastSyncTimestampFunc: method is nil but MetadataStorage.SaveLastSyncTimestamp was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Timestamp int64
	}{
		Ctx:       ctx,
		Timestamp: timestamp,
	}
	mock.lockSaveLastSyncTimestamp.Lock()
	mock.calls.SaveLastSyncTimestamp = append(mock.calls.SaveLastSyncTimestamp, callInfo)
	mock.lockSaveLastSyncTimestamp.Unlock()
	return mock.SaveLastSyncTimestampFunc(ctx, timestamp)
}

// SaveLastSyncTimestampCalls gets all the calls that were made to SaveLastSyncTimestamp.
// Check the length with:
//
//	len(mockedMetadataStorage.SaveLastSyncTimestampCalls())
func (mock *MetadataStorageMock) SaveLastSyncTimestampCalls() []struct {
	Ctx       context.Context
	Timestamp int64
} {
	var calls []struct {
		Ctx       context.Context
		Timestamp int64
	}
	mock.lockSaveLastSyncTimestamp.RLock()
	calls = mock.calls.SaveLastSyncTimestamp
	mock.lockSaveLastSyncTimestamp.RUnlock()
	return calls
}
