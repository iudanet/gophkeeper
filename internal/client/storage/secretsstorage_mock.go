// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"sync"
)

// Ensure, that SecretsStorageMock does implement SecretsStorage.
// If this is not the case, regenerate this file with moq.
var _ SecretsStorage = &SecretsStorageMock{}

// SecretsStorageMock is a mock implementation of SecretsStorage.
//
//	func TestSomethingThatUsesSecretsStorage(t *testing.T) {
//
//		// make and configure a mocked SecretsStorage
//		mockedSecretsStorage := &SecretsStorageMock{
//			DeleteSecretFunc: func(ctx context.Context, id string) error {
//				panic("mock out the DeleteSecret method")
//			},
//			GetSecretFunc: func(ctx context.Context, id string) (*Secret, error) {
//				panic("mock out the GetSecret method")
//			},
//			GetSecretsAfterVersionFunc: func(ctx context.Context, userID string, version int64) ([]*Secret, error) {
//				panic("mock out the GetSecretsAfterVersion method")
//			},
//			ListSecretsFunc: func(ctx context.Context, userID string) ([]*Secret, error) {
//				panic("mock out the ListSecrets method")
//			},
//			ListSecretsByTypeFunc: func(ctx context.Context, userID string, secretType SecretType) ([]*Secret, error) {
//				panic("mock out the ListSecretsByType method")
//			},
//			SaveSecretFunc: func(ctx context.Context, secret *Secret) error {
//				panic("mock out the SaveSecret method")
//			},
//		}
//
//		// use mockedSecretsStorage in code that requires SecretsStorage
//		// and then make assertions.
//
//	}
type SecretsStorageMock struct {
	// DeleteSecretFunc mocks the DeleteSecret method.
	DeleteSecretFunc func(ctx context.Context, id string) error

	// GetSecretFunc mocks the GetSecret method.
	GetSecretFunc func(ctx context.Context, id string) (*Secret, error)

	// GetSecretsAfterVersionFunc mocks the GetSecretsAfterVersion method.
	GetSecretsAfterVersionFunc func(ctx context.Context, userID string, version int64) ([]*Secret, error)

	// ListSecretsFunc mocks the ListSecrets method.
	ListSecretsFunc func(ctx context.Context, userID string) ([]*Secret, error)

	// ListSecretsByTypeFunc mocks the ListSecretsByType method.
	ListSecretsByTypeFunc func(ctx context.Context, userID string, secretType SecretType) ([]*Secret, error)

	// SaveSecretFunc mocks the SaveSecret method.
	SaveSecretFunc func(ctx context.Context, secret *Secret) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteSecret holds details about calls to the DeleteSecret method.
		DeleteSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetSecret holds details about calls to the GetSecret method.
		GetSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetSecretsAfterVersion holds details about calls to the GetSecretsAfterVersion method.
		GetSecretsAfterVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// Version is the version argument value.
			Version int64
		}
		// ListSecrets holds details about calls to the ListSecrets method.
		ListSecrets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// ListSecretsByType holds details about calls to the ListSecretsByType method.
		ListSecretsByType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// SecretType is the secretType argument value.
			SecretType SecretType
		}
		// SaveSecret holds details about calls to the SaveSecret method.
		SaveSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Secret is the secret argument value.
			Secret *Secret
		}
	}
	lockDeleteSecret           sync.RWMutex
	lockGetSecret              sync.RWMutex
	lockGetSecretsAfterVersion sync.RWMutex
	lockListSecrets            sync.RWMutex
	lockListSecretsByType      sync.RWMutex
	lockSaveSecret             sync.RWMutex
}

// DeleteSecret calls DeleteSecretFunc.
func (mock *SecretsStorageMock) DeleteSecret(ctx context.Context, id string) error {
	if mock.DeleteSecretFunc == nil {
		panic("SecretsStorageMock.DeleteSecretFunc: method is nil but SecretsStorage.DeleteSecret was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteSecret.Lock()
	mock.calls.DeleteSecret = append(mock.calls.DeleteSecret, callInfo)
	mock.lockDeleteSecret.Unlock()
	return mock.DeleteSecretFunc(ctx, id)
}

// DeleteSecretCalls gets all the calls that were made to DeleteSecret.
// Check the length with:
//
//	len(mockedSecretsStorage.DeleteSecretCalls())
func (mock *SecretsStorageMock) DeleteSecretCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteSecret.RLock()
	calls = mock.calls.DeleteSecret
	mock.lockDeleteSecret.RUnlock()
	return calls
}

// GetSecret calls GetSecretFunc.
func (mock *SecretsStorageMock) GetSecret(ctx context.Context, id string) (*Secret, error) {
	if mock.GetSecretFunc == nil {
		panic("SecretsStorageMock.GetSecretFunc: method is nil but SecretsStorage.GetSecret was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetSecret.Lock()
	mock.calls.GetSecret = append(mock.calls.GetSecret, callInfo)
	mock.lockGetSecret.Unlock()
	return mock.GetSecretFunc(ctx, id)
}

// GetSecretCalls gets all the calls that were made to GetSecret.
// Check the length with:
//
//	len(mockedSecretsStorage.GetSecretCalls())
func (mock *SecretsStorageMock) GetSecretCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetSecret.RLock()
	calls = mock.calls.GetSecret
	mock.lockGetSecret.RUnlock()
	return calls
}

// GetSecretsAfterVersion calls GetSecretsAfterVersionFunc.
func (mock *SecretsStorageMock) GetSecretsAfterVersion(ctx context.Context, userID string, version int64) ([]*Secret, error) {
	if mock.GetSecretsAfterVersionFunc == nil {
		panic("SecretsStorageMock.GetSecretsAfterVersionFunc: method is nil but SecretsStorage.GetSecretsAfterVersion was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		UserID  string
		Version int64
	}{
		Ctx:     ctx,
		UserID:  userID,
		Version: version,
	}
	mock.lockGetSecretsAfterVersion.Lock()
	mock.calls.GetSecretsAfterVersion = append(mock.calls.GetSecretsAfterVersion, callInfo)
	mock.lockGetSecretsAfterVersion.Unlock()
	return mock.GetSecretsAfterVersionFunc(ctx, userID, version)
}

// GetSecretsAfterVersionCalls gets all the calls that were made to GetSecretsAfterVersion.
// Check the length with:
//
//	len(mockedSecretsStorage.GetSecretsAfterVersionCalls())
func (mock *SecretsStorageMock) GetSecretsAfterVersionCalls() []struct {
	Ctx     context.Context
	UserID  string
	Version int64
} {
	var calls []struct {
		Ctx     context.Context
		UserID  string
		Version int64
	}
	mock.lockGetSecretsAfterVersion.RLock()
	calls = mock.calls.GetSecretsAfterVersion
	mock.lockGetSecretsAfterVersion.RUnlock()
	return calls
}

// ListSecrets calls ListSecretsFunc.
func (mock *SecretsStorageMock) ListSecrets(ctx context.Context, userID string) ([]*Secret, error) {
	if mock.ListSecretsFunc == nil {
		panic("SecretsStorageMock.ListSecretsFunc: method is nil but SecretsStorage.ListSecrets was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockListSecrets.Lock()
	mock.calls.ListSecrets = append(mock.calls.ListSecrets, callInfo)
	mock.lockListSecrets.Unlock()
	return mock.ListSecretsFunc(ctx, userID)
}

// ListSecretsCalls gets all the calls that were made to ListSecrets.
// Check the length with:
//
//	len(mockedSecretsStorage.ListSecretsCalls())
func (mock *SecretsStorageMock) ListSecretsCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockListSecrets.RLock()
	calls = mock.calls.ListSecrets
	mock.lockListSecrets.RUnlock()
	return calls
}

// ListSecretsByType calls ListSecretsByTypeFunc.
func (mock *SecretsStorageMock) ListSecretsByType(ctx context.Context, userID string, secretType SecretType) ([]*Secret, error) {
	if mock.ListSecretsByTypeFunc == nil {
		panic("SecretsStorageMock.ListSecretsByTypeFunc: method is nil but SecretsStorage.ListSecretsByType was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		UserID     string
		SecretType SecretType
	}{
		Ctx:        ctx,
		UserID:     userID,
		SecretType: secretType,
	}
	mock.lockListSecretsByType.Lock()
	mock.calls.ListSecretsByType = append(mock.calls.ListSecretsByType, callInfo)
	mock.lockListSecretsByType.Unlock()
	return mock.ListSecretsByTypeFunc(ctx, userID, secretType)
}

// ListSecretsByTypeCalls gets all the calls that were made to ListSecretsByType.
// Check the length with:
//
//	len(mockedSecretsStorage.ListSecretsByTypeCalls())
func (mock *SecretsStorageMock) ListSecretsByTypeCalls() []struct {
	Ctx        context.Context
	UserID     string
	SecretType SecretType
} {
	var calls []struct {
		Ctx        context.Context
		UserID     string
		SecretType SecretType
	}
	mock.lockListSecretsByType.RLock()
	calls = mock.calls.ListSecretsByType
	mock.lockListSecretsByType.RUnlock()
	return calls
}

// SaveSecret calls SaveSecretFunc.
func (mock *SecretsStorageMock) SaveSecret(ctx context.Context, secret *Secret) error {
	if mock.SaveSecretFunc == nil {
		panic("SecretsStorageMock.SaveSecretFunc: method is nil but SecretsStorage.SaveSecret was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Secret *Secret
	}{
		Ctx:    ctx,
		Secret: secret,
	}
	mock.lockSaveSecret.Lock()
	mock.calls.SaveSecret = append(mock.calls.SaveSecret, callInfo)
	mock.lockSaveSecret.Unlock()
	return mock.SaveSecretFunc(ctx, secret)
}

// SaveSecretCalls gets all the calls that were made to SaveSecret.
// Check the length with:
//
//	len(mockedSecretsStorage.SaveSecretCalls())
func (mock *SecretsStorageMock) SaveSecretCalls() []struct {
	Ctx    context.Context
	Secret *Secret
} {
	var calls []struct {
		Ctx    context.Context
		Secret *Secret
	}
	mock.lockSaveSecret.RLock()
	calls = mock.calls.SaveSecret
	mock.lockSaveSecret.RUnlock()
	return calls
}
