// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cli

import (
	"sync"
)

// Ensure, that IOMock does implement IO.
// If this is not the case, regenerate this file with moq.
var _ IO = &IOMock{}

// IOMock is a mock implementation of IO.
//
//	func TestSomethingThatUsesIO(t *testing.T) {
//
//		// make and configure a mocked IO
//		mockedIO := &IOMock{
//			PrintfFunc: func(format string, a ...any)  {
//				panic("mock out the Printf method")
//			},
//			PrintlnFunc: func(a ...any)  {
//				panic("mock out the Println method")
//			},
//			ReadInputFunc: func(prompt string) (string, error) {
//				panic("mock out the ReadInput method")
//			},
//			ReadPasswordFunc: func(prompt string) (string, error) {
//				panic("mock out the ReadPassword method")
//			},
//		}
//
//		// use mockedIO in code that requires IO
//		// and then make assertions.
//
//	}
type IOMock struct {
	// PrintfFunc mocks the Printf method.
	PrintfFunc func(format string, a ...any)

	// PrintlnFunc mocks the Println method.
	PrintlnFunc func(a ...any)

	// ReadInputFunc mocks the ReadInput method.
	ReadInputFunc func(prompt string) (string, error)

	// ReadPasswordFunc mocks the ReadPassword method.
	ReadPasswordFunc func(prompt string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Printf holds details about calls to the Printf method.
		Printf []struct {
			// Format is the format argument value.
			Format string
			// A is the a argument value.
			A []any
		}
		// Println holds details about calls to the Println method.
		Println []struct {
			// A is the a argument value.
			A []any
		}
		// ReadInput holds details about calls to the ReadInput method.
		ReadInput []struct {
			// Prompt is the prompt argument value.
			Prompt string
		}
		// ReadPassword holds details about calls to the ReadPassword method.
		ReadPassword []struct {
			// Prompt is the prompt argument value.
			Prompt string
		}
	}
	lockPrintf       sync.RWMutex
	lockPrintln      sync.RWMutex
	lockReadInput    sync.RWMutex
	lockReadPassword sync.RWMutex
}

// Printf calls PrintfFunc.
func (mock *IOMock) Printf(format string, a ...any) {
	if mock.PrintfFunc == nil {
		panic("IOMock.PrintfFunc: method is nil but IO.Printf was just called")
	}
	callInfo := struct {
		Format string
		A      []any
	}{
		Format: format,
		A:      a,
	}
	mock.lockPrintf.Lock()
	mock.calls.Printf = append(mock.calls.Printf, callInfo)
	mock.lockPrintf.Unlock()
	mock.PrintfFunc(format, a...)
}

// PrintfCalls gets all the calls that were made to Printf.
// Check the length with:
//
//	len(mockedIO.PrintfCalls())
func (mock *IOMock) PrintfCalls() []struct {
	Format string
	A      []any
} {
	var calls []struct {
		Format string
		A      []any
	}
	mock.lockPrintf.RLock()
	calls = mock.calls.Printf
	mock.lockPrintf.RUnlock()
	return calls
}

// Println calls PrintlnFunc.
func (mock *IOMock) Println(a ...any) {
	if mock.PrintlnFunc == nil {
		panic("IOMock.PrintlnFunc: method is nil but IO.Println was just called")
	}
	callInfo := struct {
		A []any
	}{
		A: a,
	}
	mock.lockPrintln.Lock()
	mock.calls.Println = append(mock.calls.Println, callInfo)
	mock.lockPrintln.Unlock()
	mock.PrintlnFunc(a...)
}

// PrintlnCalls gets all the calls that were made to Println.
// Check the length with:
//
//	len(mockedIO.PrintlnCalls())
func (mock *IOMock) PrintlnCalls() []struct {
	A []any
} {
	var calls []struct {
		A []any
	}
	mock.lockPrintln.RLock()
	calls = mock.calls.Println
	mock.lockPrintln.RUnlock()
	return calls
}

// ReadInput calls ReadInputFunc.
func (mock *IOMock) ReadInput(prompt string) (string, error) {
	if mock.ReadInputFunc == nil {
		panic("IOMock.ReadInputFunc: method is nil but IO.ReadInput was just called")
	}
	callInfo := struct {
		Prompt string
	}{
		Prompt: prompt,
	}
	mock.lockReadInput.Lock()
	mock.calls.ReadInput = append(mock.calls.ReadInput, callInfo)
	mock.lockReadInput.Unlock()
	return mock.ReadInputFunc(prompt)
}

// ReadInputCalls gets all the calls that were made to ReadInput.
// Check the length with:
//
//	len(mockedIO.ReadInputCalls())
func (mock *IOMock) ReadInputCalls() []struct {
	Prompt string
} {
	var calls []struct {
		Prompt string
	}
	mock.lockReadInput.RLock()
	calls = mock.calls.ReadInput
	mock.lockReadInput.RUnlock()
	return calls
}

// ReadPassword calls ReadPasswordFunc.
func (mock *IOMock) ReadPassword(prompt string) (string, error) {
	if mock.ReadPasswordFunc == nil {
		panic("IOMock.ReadPasswordFunc: method is nil but IO.ReadPassword was just called")
	}
	callInfo := struct {
		Prompt string
	}{
		Prompt: prompt,
	}
	mock.lockReadPassword.Lock()
	mock.calls.ReadPassword = append(mock.calls.ReadPassword, callInfo)
	mock.lockReadPassword.Unlock()
	return mock.ReadPasswordFunc(prompt)
}

// ReadPasswordCalls gets all the calls that were made to ReadPassword.
// Check the length with:
//
//	len(mockedIO.ReadPasswordCalls())
func (mock *IOMock) ReadPasswordCalls() []struct {
	Prompt string
} {
	var calls []struct {
		Prompt string
	}
	mock.lockReadPassword.RLock()
	calls = mock.calls.ReadPassword
	mock.lockReadPassword.RUnlock()
	return calls
}
