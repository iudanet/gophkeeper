// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sync

import (
	"context"
	"sync"
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked Service
//		mockedService := &ServiceMock{
//			GetPendingSyncCountFunc: func(ctx context.Context) (int, error) {
//				panic("mock out the GetPendingSyncCount method")
//			},
//			SyncFunc: func(ctx context.Context, userID string, accessToken string) (*SyncResult, error) {
//				panic("mock out the Sync method")
//			},
//		}
//
//		// use mockedService in code that requires Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// GetPendingSyncCountFunc mocks the GetPendingSyncCount method.
	GetPendingSyncCountFunc func(ctx context.Context) (int, error)

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context, userID string, accessToken string) (*SyncResult, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPendingSyncCount holds details about calls to the GetPendingSyncCount method.
		GetPendingSyncCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
	}
	lockGetPendingSyncCount sync.RWMutex
	lockSync                sync.RWMutex
}

// GetPendingSyncCount calls GetPendingSyncCountFunc.
func (mock *ServiceMock) GetPendingSyncCount(ctx context.Context) (int, error) {
	if mock.GetPendingSyncCountFunc == nil {
		panic("ServiceMock.GetPendingSyncCountFunc: method is nil but Service.GetPendingSyncCount was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetPendingSyncCount.Lock()
	mock.calls.GetPendingSyncCount = append(mock.calls.GetPendingSyncCount, callInfo)
	mock.lockGetPendingSyncCount.Unlock()
	return mock.GetPendingSyncCountFunc(ctx)
}

// GetPendingSyncCountCalls gets all the calls that were made to GetPendingSyncCount.
// Check the length with:
//
//	len(mockedService.GetPendingSyncCountCalls())
func (mock *ServiceMock) GetPendingSyncCountCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetPendingSyncCount.RLock()
	calls = mock.calls.GetPendingSyncCount
	mock.lockGetPendingSyncCount.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *ServiceMock) Sync(ctx context.Context, userID string, accessToken string) (*SyncResult, error) {
	if mock.SyncFunc == nil {
		panic("ServiceMock.SyncFunc: method is nil but Service.Sync was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		UserID      string
		AccessToken string
	}{
		Ctx:         ctx,
		UserID:      userID,
		AccessToken: accessToken,
	}
	mock.lockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	mock.lockSync.Unlock()
	return mock.SyncFunc(ctx, userID, accessToken)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//
//	len(mockedService.SyncCalls())
func (mock *ServiceMock) SyncCalls() []struct {
	Ctx         context.Context
	UserID      string
	AccessToken string
} {
	var calls []struct {
		Ctx         context.Context
		UserID      string
		AccessToken string
	}
	mock.lockSync.RLock()
	calls = mock.calls.Sync
	mock.lockSync.RUnlock()
	return calls
}
