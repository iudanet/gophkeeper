// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sync

import (
	"context"
	"github.com/iudanet/gophkeeper/pkg/api"
	"sync"
)

// Ensure, that APIClientMock does implement APIClient.
// If this is not the case, regenerate this file with moq.
var _ APIClient = &APIClientMock{}

// APIClientMock is a mock implementation of APIClient.
//
//	func TestSomethingThatUsesAPIClient(t *testing.T) {
//
//		// make and configure a mocked APIClient
//		mockedAPIClient := &APIClientMock{
//			SyncFunc: func(ctx context.Context, accessToken string, req api.SyncRequest) (*api.SyncResponse, error) {
//				panic("mock out the Sync method")
//			},
//		}
//
//		// use mockedAPIClient in code that requires APIClient
//		// and then make assertions.
//
//	}
type APIClientMock struct {
	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context, accessToken string, req api.SyncRequest) (*api.SyncResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Req is the req argument value.
			Req api.SyncRequest
		}
	}
	lockSync sync.RWMutex
}

// Sync calls SyncFunc.
func (mock *APIClientMock) Sync(ctx context.Context, accessToken string, req api.SyncRequest) (*api.SyncResponse, error) {
	if mock.SyncFunc == nil {
		panic("APIClientMock.SyncFunc: method is nil but APIClient.Sync was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Req         api.SyncRequest
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Req:         req,
	}
	mock.lockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	mock.lockSync.Unlock()
	return mock.SyncFunc(ctx, accessToken, req)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//
//	len(mockedAPIClient.SyncCalls())
func (mock *APIClientMock) SyncCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Req         api.SyncRequest
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Req         api.SyncRequest
	}
	mock.lockSync.RLock()
	calls = mock.calls.Sync
	mock.lockSync.RUnlock()
	return calls
}
