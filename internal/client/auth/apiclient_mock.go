// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"context"
	pkgapi "github.com/iudanet/gophkeeper/pkg/api"
	"sync"
)

// Ensure, that APIClientMock does implement APIClient.
// If this is not the case, regenerate this file with moq.
var _ APIClient = &APIClientMock{}

// APIClientMock is a mock implementation of APIClient.
//
//	func TestSomethingThatUsesAPIClient(t *testing.T) {
//
//		// make and configure a mocked APIClient
//		mockedAPIClient := &APIClientMock{
//			GetSaltFunc: func(ctx context.Context, username string) (*pkgapi.SaltResponse, error) {
//				panic("mock out the GetSalt method")
//			},
//			LoginFunc: func(ctx context.Context, req pkgapi.LoginRequest) (*pkgapi.TokenResponse, error) {
//				panic("mock out the Login method")
//			},
//			LogoutFunc: func(ctx context.Context, accessToken string) error {
//				panic("mock out the Logout method")
//			},
//			RefreshFunc: func(ctx context.Context, refreshToken string) (*pkgapi.TokenResponse, error) {
//				panic("mock out the Refresh method")
//			},
//			RegisterFunc: func(ctx context.Context, req pkgapi.RegisterRequest) (*pkgapi.RegisterResponse, error) {
//				panic("mock out the Register method")
//			},
//		}
//
//		// use mockedAPIClient in code that requires APIClient
//		// and then make assertions.
//
//	}
type APIClientMock struct {
	// GetSaltFunc mocks the GetSalt method.
	GetSaltFunc func(ctx context.Context, username string) (*pkgapi.SaltResponse, error)

	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, req pkgapi.LoginRequest) (*pkgapi.TokenResponse, error)

	// LogoutFunc mocks the Logout method.
	LogoutFunc func(ctx context.Context, accessToken string) error

	// RefreshFunc mocks the Refresh method.
	RefreshFunc func(ctx context.Context, refreshToken string) (*pkgapi.TokenResponse, error)

	// RegisterFunc mocks the Register method.
	RegisterFunc func(ctx context.Context, req pkgapi.RegisterRequest) (*pkgapi.RegisterResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetSalt holds details about calls to the GetSalt method.
		GetSalt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req pkgapi.LoginRequest
		}
		// Logout holds details about calls to the Logout method.
		Logout []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// Refresh holds details about calls to the Refresh method.
		Refresh []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RefreshToken is the refreshToken argument value.
			RefreshToken string
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req pkgapi.RegisterRequest
		}
	}
	lockGetSalt  sync.RWMutex
	lockLogin    sync.RWMutex
	lockLogout   sync.RWMutex
	lockRefresh  sync.RWMutex
	lockRegister sync.RWMutex
}

// GetSalt calls GetSaltFunc.
func (mock *APIClientMock) GetSalt(ctx context.Context, username string) (*pkgapi.SaltResponse, error) {
	if mock.GetSaltFunc == nil {
		panic("APIClientMock.GetSaltFunc: method is nil but APIClient.GetSalt was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetSalt.Lock()
	mock.calls.GetSalt = append(mock.calls.GetSalt, callInfo)
	mock.lockGetSalt.Unlock()
	return mock.GetSaltFunc(ctx, username)
}

// GetSaltCalls gets all the calls that were made to GetSalt.
// Check the length with:
//
//	len(mockedAPIClient.GetSaltCalls())
func (mock *APIClientMock) GetSaltCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetSalt.RLock()
	calls = mock.calls.GetSalt
	mock.lockGetSalt.RUnlock()
	return calls
}

// Login calls LoginFunc.
func (mock *APIClientMock) Login(ctx context.Context, req pkgapi.LoginRequest) (*pkgapi.TokenResponse, error) {
	if mock.LoginFunc == nil {
		panic("APIClientMock.LoginFunc: method is nil but APIClient.Login was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req pkgapi.LoginRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(ctx, req)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedAPIClient.LoginCalls())
func (mock *APIClientMock) LoginCalls() []struct {
	Ctx context.Context
	Req pkgapi.LoginRequest
} {
	var calls []struct {
		Ctx context.Context
		Req pkgapi.LoginRequest
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}

// Logout calls LogoutFunc.
func (mock *APIClientMock) Logout(ctx context.Context, accessToken string) error {
	if mock.LogoutFunc == nil {
		panic("APIClientMock.LogoutFunc: method is nil but APIClient.Logout was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
	}
	mock.lockLogout.Lock()
	mock.calls.Logout = append(mock.calls.Logout, callInfo)
	mock.lockLogout.Unlock()
	return mock.LogoutFunc(ctx, accessToken)
}

// LogoutCalls gets all the calls that were made to Logout.
// Check the length with:
//
//	len(mockedAPIClient.LogoutCalls())
func (mock *APIClientMock) LogoutCalls() []struct {
	Ctx         context.Context
	AccessToken string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
	}
	mock.lockLogout.RLock()
	calls = mock.calls.Logout
	mock.lockLogout.RUnlock()
	return calls
}

// Refresh calls RefreshFunc.
func (mock *APIClientMock) Refresh(ctx context.Context, refreshToken string) (*pkgapi.TokenResponse, error) {
	if mock.RefreshFunc == nil {
		panic("APIClientMock.RefreshFunc: method is nil but APIClient.Refresh was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		RefreshToken string
	}{
		Ctx:          ctx,
		RefreshToken: refreshToken,
	}
	mock.lockRefresh.Lock()
	mock.calls.Refresh = append(mock.calls.Refresh, callInfo)
	mock.lockRefresh.Unlock()
	return mock.RefreshFunc(ctx, refreshToken)
}

// RefreshCalls gets all the calls that were made to Refresh.
// Check the length with:
//
//	len(mockedAPIClient.RefreshCalls())
func (mock *APIClientMock) RefreshCalls() []struct {
	Ctx          context.Context
	RefreshToken string
} {
	var calls []struct {
		Ctx          context.Context
		RefreshToken string
	}
	mock.lockRefresh.RLock()
	calls = mock.calls.Refresh
	mock.lockRefresh.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *APIClientMock) Register(ctx context.Context, req pkgapi.RegisterRequest) (*pkgapi.RegisterResponse, error) {
	if mock.RegisterFunc == nil {
		panic("APIClientMock.RegisterFunc: method is nil but APIClient.Register was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req pkgapi.RegisterRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(ctx, req)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedAPIClient.RegisterCalls())
func (mock *APIClientMock) RegisterCalls() []struct {
	Ctx context.Context
	Req pkgapi.RegisterRequest
} {
	var calls []struct {
		Ctx context.Context
		Req pkgapi.RegisterRequest
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}
