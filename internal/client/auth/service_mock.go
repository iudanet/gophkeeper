// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"context"
	"github.com/iudanet/gophkeeper/internal/client/storage"
	"sync"
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked Service
//		mockedService := &ServiceMock{
//			DeleteAuthFunc: func(ctx context.Context) error {
//				panic("mock out the DeleteAuth method")
//			},
//			GetAuthDecryptDataFunc: func(ctx context.Context) (*storage.AuthData, error) {
//				panic("mock out the GetAuthDecryptData method")
//			},
//			GetAuthEncryptDataFunc: func(ctx context.Context) (*storage.AuthData, error) {
//				panic("mock out the GetAuthEncryptData method")
//			},
//			IsAuthenticatedFunc: func(ctx context.Context) (bool, error) {
//				panic("mock out the IsAuthenticated method")
//			},
//			LoginFunc: func(ctx context.Context, username string, masterPassword string) (*LoginResult, error) {
//				panic("mock out the Login method")
//			},
//			LogoutFunc: func(ctx context.Context) error {
//				panic("mock out the Logout method")
//			},
//			RefreshTokenFunc: func(ctx context.Context) error {
//				panic("mock out the RefreshToken method")
//			},
//			RegisterFunc: func(ctx context.Context, username string, masterPassword string) (*RegisterResult, error) {
//				panic("mock out the Register method")
//			},
//			SaveAuthFunc: func(ctx context.Context, auth *storage.AuthData) error {
//				panic("mock out the SaveAuth method")
//			},
//			SetEncryptionKeyFunc: func(key []byte)  {
//				panic("mock out the SetEncryptionKey method")
//			},
//		}
//
//		// use mockedService in code that requires Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// DeleteAuthFunc mocks the DeleteAuth method.
	DeleteAuthFunc func(ctx context.Context) error

	// GetAuthDecryptDataFunc mocks the GetAuthDecryptData method.
	GetAuthDecryptDataFunc func(ctx context.Context) (*storage.AuthData, error)

	// GetAuthEncryptDataFunc mocks the GetAuthEncryptData method.
	GetAuthEncryptDataFunc func(ctx context.Context) (*storage.AuthData, error)

	// IsAuthenticatedFunc mocks the IsAuthenticated method.
	IsAuthenticatedFunc func(ctx context.Context) (bool, error)

	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, username string, masterPassword string) (*LoginResult, error)

	// LogoutFunc mocks the Logout method.
	LogoutFunc func(ctx context.Context) error

	// RefreshTokenFunc mocks the RefreshToken method.
	RefreshTokenFunc func(ctx context.Context) error

	// RegisterFunc mocks the Register method.
	RegisterFunc func(ctx context.Context, username string, masterPassword string) (*RegisterResult, error)

	// SaveAuthFunc mocks the SaveAuth method.
	SaveAuthFunc func(ctx context.Context, auth *storage.AuthData) error

	// SetEncryptionKeyFunc mocks the SetEncryptionKey method.
	SetEncryptionKeyFunc func(key []byte)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteAuth holds details about calls to the DeleteAuth method.
		DeleteAuth []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAuthDecryptData holds details about calls to the GetAuthDecryptData method.
		GetAuthDecryptData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAuthEncryptData holds details about calls to the GetAuthEncryptData method.
		GetAuthEncryptData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// IsAuthenticated holds details about calls to the IsAuthenticated method.
		IsAuthenticated []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
			// MasterPassword is the masterPassword argument value.
			MasterPassword string
		}
		// Logout holds details about calls to the Logout method.
		Logout []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// RefreshToken holds details about calls to the RefreshToken method.
		RefreshToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
			// MasterPassword is the masterPassword argument value.
			MasterPassword string
		}
		// SaveAuth holds details about calls to the SaveAuth method.
		SaveAuth []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Auth is the auth argument value.
			Auth *storage.AuthData
		}
		// SetEncryptionKey holds details about calls to the SetEncryptionKey method.
		SetEncryptionKey []struct {
			// Key is the key argument value.
			Key []byte
		}
	}
	lockDeleteAuth         sync.RWMutex
	lockGetAuthDecryptData sync.RWMutex
	lockGetAuthEncryptData sync.RWMutex
	lockIsAuthenticated    sync.RWMutex
	lockLogin              sync.RWMutex
	lockLogout             sync.RWMutex
	lockRefreshToken       sync.RWMutex
	lockRegister           sync.RWMutex
	lockSaveAuth           sync.RWMutex
	lockSetEncryptionKey   sync.RWMutex
}

// DeleteAuth calls DeleteAuthFunc.
func (mock *ServiceMock) DeleteAuth(ctx context.Context) error {
	if mock.DeleteAuthFunc == nil {
		panic("ServiceMock.DeleteAuthFunc: method is nil but Service.DeleteAuth was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockDeleteAuth.Lock()
	mock.calls.DeleteAuth = append(mock.calls.DeleteAuth, callInfo)
	mock.lockDeleteAuth.Unlock()
	return mock.DeleteAuthFunc(ctx)
}

// DeleteAuthCalls gets all the calls that were made to DeleteAuth.
// Check the length with:
//
//	len(mockedService.DeleteAuthCalls())
func (mock *ServiceMock) DeleteAuthCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockDeleteAuth.RLock()
	calls = mock.calls.DeleteAuth
	mock.lockDeleteAuth.RUnlock()
	return calls
}

// GetAuthDecryptData calls GetAuthDecryptDataFunc.
func (mock *ServiceMock) GetAuthDecryptData(ctx context.Context) (*storage.AuthData, error) {
	if mock.GetAuthDecryptDataFunc == nil {
		panic("ServiceMock.GetAuthDecryptDataFunc: method is nil but Service.GetAuthDecryptData was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAuthDecryptData.Lock()
	mock.calls.GetAuthDecryptData = append(mock.calls.GetAuthDecryptData, callInfo)
	mock.lockGetAuthDecryptData.Unlock()
	return mock.GetAuthDecryptDataFunc(ctx)
}

// GetAuthDecryptDataCalls gets all the calls that were made to GetAuthDecryptData.
// Check the length with:
//
//	len(mockedService.GetAuthDecryptDataCalls())
func (mock *ServiceMock) GetAuthDecryptDataCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAuthDecryptData.RLock()
	calls = mock.calls.GetAuthDecryptData
	mock.lockGetAuthDecryptData.RUnlock()
	return calls
}

// GetAuthEncryptData calls GetAuthEncryptDataFunc.
func (mock *ServiceMock) GetAuthEncryptData(ctx context.Context) (*storage.AuthData, error) {
	if mock.GetAuthEncryptDataFunc == nil {
		panic("ServiceMock.GetAuthEncryptDataFunc: method is nil but Service.GetAuthEncryptData was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAuthEncryptData.Lock()
	mock.calls.GetAuthEncryptData = append(mock.calls.GetAuthEncryptData, callInfo)
	mock.lockGetAuthEncryptData.Unlock()
	return mock.GetAuthEncryptDataFunc(ctx)
}

// GetAuthEncryptDataCalls gets all the calls that were made to GetAuthEncryptData.
// Check the length with:
//
//	len(mockedService.GetAuthEncryptDataCalls())
func (mock *ServiceMock) GetAuthEncryptDataCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAuthEncryptData.RLock()
	calls = mock.calls.GetAuthEncryptData
	mock.lockGetAuthEncryptData.RUnlock()
	return calls
}

// IsAuthenticated calls IsAuthenticatedFunc.
func (mock *ServiceMock) IsAuthenticated(ctx context.Context) (bool, error) {
	if mock.IsAuthenticatedFunc == nil {
		panic("ServiceMock.IsAuthenticatedFunc: method is nil but Service.IsAuthenticated was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockIsAuthenticated.Lock()
	mock.calls.IsAuthenticated = append(mock.calls.IsAuthenticated, callInfo)
	mock.lockIsAuthenticated.Unlock()
	return mock.IsAuthenticatedFunc(ctx)
}

// IsAuthenticatedCalls gets all the calls that were made to IsAuthenticated.
// Check the length with:
//
//	len(mockedService.IsAuthenticatedCalls())
func (mock *ServiceMock) IsAuthenticatedCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockIsAuthenticated.RLock()
	calls = mock.calls.IsAuthenticated
	mock.lockIsAuthenticated.RUnlock()
	return calls
}

// Login calls LoginFunc.
func (mock *ServiceMock) Login(ctx context.Context, username string, masterPassword string) (*LoginResult, error) {
	if mock.LoginFunc == nil {
		panic("ServiceMock.LoginFunc: method is nil but Service.Login was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Username       string
		MasterPassword string
	}{
		Ctx:            ctx,
		Username:       username,
		MasterPassword: masterPassword,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(ctx, username, masterPassword)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedService.LoginCalls())
func (mock *ServiceMock) LoginCalls() []struct {
	Ctx            context.Context
	Username       string
	MasterPassword string
} {
	var calls []struct {
		Ctx            context.Context
		Username       string
		MasterPassword string
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}

// Logout calls LogoutFunc.
func (mock *ServiceMock) Logout(ctx context.Context) error {
	if mock.LogoutFunc == nil {
		panic("ServiceMock.LogoutFunc: method is nil but Service.Logout was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockLogout.Lock()
	mock.calls.Logout = append(mock.calls.Logout, callInfo)
	mock.lockLogout.Unlock()
	return mock.LogoutFunc(ctx)
}

// LogoutCalls gets all the calls that were made to Logout.
// Check the length with:
//
//	len(mockedService.LogoutCalls())
func (mock *ServiceMock) LogoutCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockLogout.RLock()
	calls = mock.calls.Logout
	mock.lockLogout.RUnlock()
	return calls
}

// RefreshToken calls RefreshTokenFunc.
func (mock *ServiceMock) RefreshToken(ctx context.Context) error {
	if mock.RefreshTokenFunc == nil {
		panic("ServiceMock.RefreshTokenFunc: method is nil but Service.RefreshToken was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRefreshToken.Lock()
	mock.calls.RefreshToken = append(mock.calls.RefreshToken, callInfo)
	mock.lockRefreshToken.Unlock()
	return mock.RefreshTokenFunc(ctx)
}

// RefreshTokenCalls gets all the calls that were made to RefreshToken.
// Check the length with:
//
//	len(mockedService.RefreshTokenCalls())
func (mock *ServiceMock) RefreshTokenCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRefreshToken.RLock()
	calls = mock.calls.RefreshToken
	mock.lockRefreshToken.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *ServiceMock) Register(ctx context.Context, username string, masterPassword string) (*RegisterResult, error) {
	if mock.RegisterFunc == nil {
		panic("ServiceMock.RegisterFunc: method is nil but Service.Register was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Username       string
		MasterPassword string
	}{
		Ctx:            ctx,
		Username:       username,
		MasterPassword: masterPassword,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(ctx, username, masterPassword)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedService.RegisterCalls())
func (mock *ServiceMock) RegisterCalls() []struct {
	Ctx            context.Context
	Username       string
	MasterPassword string
} {
	var calls []struct {
		Ctx            context.Context
		Username       string
		MasterPassword string
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

// SaveAuth calls SaveAuthFunc.
func (mock *ServiceMock) SaveAuth(ctx context.Context, auth *storage.AuthData) error {
	if mock.SaveAuthFunc == nil {
		panic("ServiceMock.SaveAuthFunc: method is nil but Service.SaveAuth was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Auth *storage.AuthData
	}{
		Ctx:  ctx,
		Auth: auth,
	}
	mock.lockSaveAuth.Lock()
	mock.calls.SaveAuth = append(mock.calls.SaveAuth, callInfo)
	mock.lockSaveAuth.Unlock()
	return mock.SaveAuthFunc(ctx, auth)
}

// SaveAuthCalls gets all the calls that were made to SaveAuth.
// Check the length with:
//
//	len(mockedService.SaveAuthCalls())
func (mock *ServiceMock) SaveAuthCalls() []struct {
	Ctx  context.Context
	Auth *storage.AuthData
} {
	var calls []struct {
		Ctx  context.Context
		Auth *storage.AuthData
	}
	mock.lockSaveAuth.RLock()
	calls = mock.calls.SaveAuth
	mock.lockSaveAuth.RUnlock()
	return calls
}

// SetEncryptionKey calls SetEncryptionKeyFunc.
func (mock *ServiceMock) SetEncryptionKey(key []byte) {
	if mock.SetEncryptionKeyFunc == nil {
		panic("ServiceMock.SetEncryptionKeyFunc: method is nil but Service.SetEncryptionKey was just called")
	}
	callInfo := struct {
		Key []byte
	}{
		Key: key,
	}
	mock.lockSetEncryptionKey.Lock()
	mock.calls.SetEncryptionKey = append(mock.calls.SetEncryptionKey, callInfo)
	mock.lockSetEncryptionKey.Unlock()
	mock.SetEncryptionKeyFunc(key)
}

// SetEncryptionKeyCalls gets all the calls that were made to SetEncryptionKey.
// Check the length with:
//
//	len(mockedService.SetEncryptionKeyCalls())
func (mock *ServiceMock) SetEncryptionKeyCalls() []struct {
	Key []byte
} {
	var calls []struct {
		Key []byte
	}
	mock.lockSetEncryptionKey.RLock()
	calls = mock.calls.SetEncryptionKey
	mock.lockSetEncryptionKey.RUnlock()
	return calls
}
