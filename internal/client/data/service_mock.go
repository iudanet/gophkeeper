// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package data

import (
	"context"
	"github.com/iudanet/gophkeeper/internal/models"
	"sync"
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked Service
//		mockedService := &ServiceMock{
//			AddBinaryDataFunc: func(ctx context.Context, userID string, nodeID string, encryptionKey []byte, binary *models.BinaryData) error {
//				panic("mock out the AddBinaryData method")
//			},
//			AddCardDataFunc: func(ctx context.Context, userID string, nodeID string, encryptionKey []byte, card *models.CardData) error {
//				panic("mock out the AddCardData method")
//			},
//			AddCredentialFunc: func(ctx context.Context, userID string, nodeID string, encryptionKey []byte, cred *models.Credential) error {
//				panic("mock out the AddCredential method")
//			},
//			AddTextDataFunc: func(ctx context.Context, userID string, nodeID string, encryptionKey []byte, text *models.TextData) error {
//				panic("mock out the AddTextData method")
//			},
//			DeleteBinaryDataFunc: func(ctx context.Context, id string, nodeID string) error {
//				panic("mock out the DeleteBinaryData method")
//			},
//			DeleteCardDataFunc: func(ctx context.Context, id string, nodeID string) error {
//				panic("mock out the DeleteCardData method")
//			},
//			DeleteCredentialFunc: func(ctx context.Context, id string, nodeID string) error {
//				panic("mock out the DeleteCredential method")
//			},
//			DeleteTextDataFunc: func(ctx context.Context, id string, nodeID string) error {
//				panic("mock out the DeleteTextData method")
//			},
//			GetBinaryDataFunc: func(ctx context.Context, id string, encryptionKey []byte) (*models.BinaryData, error) {
//				panic("mock out the GetBinaryData method")
//			},
//			GetCardDataFunc: func(ctx context.Context, id string, encryptionKey []byte) (*models.CardData, error) {
//				panic("mock out the GetCardData method")
//			},
//			GetCredentialFunc: func(ctx context.Context, id string, encryptionKey []byte) (*models.Credential, error) {
//				panic("mock out the GetCredential method")
//			},
//			GetTextDataFunc: func(ctx context.Context, id string, encryptionKey []byte) (*models.TextData, error) {
//				panic("mock out the GetTextData method")
//			},
//			ListBinaryDataFunc: func(ctx context.Context, encryptionKey []byte) ([]*models.BinaryData, error) {
//				panic("mock out the ListBinaryData method")
//			},
//			ListCardDataFunc: func(ctx context.Context, encryptionKey []byte) ([]*models.CardData, error) {
//				panic("mock out the ListCardData method")
//			},
//			ListCredentialsFunc: func(ctx context.Context, encryptionKey []byte) ([]*models.Credential, error) {
//				panic("mock out the ListCredentials method")
//			},
//			ListTextDataFunc: func(ctx context.Context, encryptionKey []byte) ([]*models.TextData, error) {
//				panic("mock out the ListTextData method")
//			},
//		}
//
//		// use mockedService in code that requires Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// AddBinaryDataFunc mocks the AddBinaryData method.
	AddBinaryDataFunc func(ctx context.Context, userID string, nodeID string, encryptionKey []byte, binary *models.BinaryData) error

	// AddCardDataFunc mocks the AddCardData method.
	AddCardDataFunc func(ctx context.Context, userID string, nodeID string, encryptionKey []byte, card *models.CardData) error

	// AddCredentialFunc mocks the AddCredential method.
	AddCredentialFunc func(ctx context.Context, userID string, nodeID string, encryptionKey []byte, cred *models.Credential) error

	// AddTextDataFunc mocks the AddTextData method.
	AddTextDataFunc func(ctx context.Context, userID string, nodeID string, encryptionKey []byte, text *models.TextData) error

	// DeleteBinaryDataFunc mocks the DeleteBinaryData method.
	DeleteBinaryDataFunc func(ctx context.Context, id string, nodeID string) error

	// DeleteCardDataFunc mocks the DeleteCardData method.
	DeleteCardDataFunc func(ctx context.Context, id string, nodeID string) error

	// DeleteCredentialFunc mocks the DeleteCredential method.
	DeleteCredentialFunc func(ctx context.Context, id string, nodeID string) error

	// DeleteTextDataFunc mocks the DeleteTextData method.
	DeleteTextDataFunc func(ctx context.Context, id string, nodeID string) error

	// GetBinaryDataFunc mocks the GetBinaryData method.
	GetBinaryDataFunc func(ctx context.Context, id string, encryptionKey []byte) (*models.BinaryData, error)

	// GetCardDataFunc mocks the GetCardData method.
	GetCardDataFunc func(ctx context.Context, id string, encryptionKey []byte) (*models.CardData, error)

	// GetCredentialFunc mocks the GetCredential method.
	GetCredentialFunc func(ctx context.Context, id string, encryptionKey []byte) (*models.Credential, error)

	// GetTextDataFunc mocks the GetTextData method.
	GetTextDataFunc func(ctx context.Context, id string, encryptionKey []byte) (*models.TextData, error)

	// ListBinaryDataFunc mocks the ListBinaryData method.
	ListBinaryDataFunc func(ctx context.Context, encryptionKey []byte) ([]*models.BinaryData, error)

	// ListCardDataFunc mocks the ListCardData method.
	ListCardDataFunc func(ctx context.Context, encryptionKey []byte) ([]*models.CardData, error)

	// ListCredentialsFunc mocks the ListCredentials method.
	ListCredentialsFunc func(ctx context.Context, encryptionKey []byte) ([]*models.Credential, error)

	// ListTextDataFunc mocks the ListTextData method.
	ListTextDataFunc func(ctx context.Context, encryptionKey []byte) ([]*models.TextData, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddBinaryData holds details about calls to the AddBinaryData method.
		AddBinaryData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// NodeID is the nodeID argument value.
			NodeID string
			// EncryptionKey is the encryptionKey argument value.
			EncryptionKey []byte
			// Binary is the binary argument value.
			Binary *models.BinaryData
		}
		// AddCardData holds details about calls to the AddCardData method.
		AddCardData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// NodeID is the nodeID argument value.
			NodeID string
			// EncryptionKey is the encryptionKey argument value.
			EncryptionKey []byte
			// Card is the card argument value.
			Card *models.CardData
		}
		// AddCredential holds details about calls to the AddCredential method.
		AddCredential []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// NodeID is the nodeID argument value.
			NodeID string
			// EncryptionKey is the encryptionKey argument value.
			EncryptionKey []byte
			// Cred is the cred argument value.
			Cred *models.Credential
		}
		// AddTextData holds details about calls to the AddTextData method.
		AddTextData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// NodeID is the nodeID argument value.
			NodeID string
			// EncryptionKey is the encryptionKey argument value.
			EncryptionKey []byte
			// Text is the text argument value.
			Text *models.TextData
		}
		// DeleteBinaryData holds details about calls to the DeleteBinaryData method.
		DeleteBinaryData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// NodeID is the nodeID argument value.
			NodeID string
		}
		// DeleteCardData holds details about calls to the DeleteCardData method.
		DeleteCardData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// NodeID is the nodeID argument value.
			NodeID string
		}
		// DeleteCredential holds details about calls to the DeleteCredential method.
		DeleteCredential []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// NodeID is the nodeID argument value.
			NodeID string
		}
		// DeleteTextData holds details about calls to the DeleteTextData method.
		DeleteTextData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// NodeID is the nodeID argument value.
			NodeID string
		}
		// GetBinaryData holds details about calls to the GetBinaryData method.
		GetBinaryData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// EncryptionKey is the encryptionKey argument value.
			EncryptionKey []byte
		}
		// GetCardData holds details about calls to the GetCardData method.
		GetCardData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// EncryptionKey is the encryptionKey argument value.
			EncryptionKey []byte
		}
		// GetCredential holds details about calls to the GetCredential method.
		GetCredential []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// EncryptionKey is the encryptionKey argument value.
			EncryptionKey []byte
		}
		// GetTextData holds details about calls to the GetTextData method.
		GetTextData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// EncryptionKey is the encryptionKey argument value.
			EncryptionKey []byte
		}
		// ListBinaryData holds details about calls to the ListBinaryData method.
		ListBinaryData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EncryptionKey is the encryptionKey argument value.
			EncryptionKey []byte
		}
		// ListCardData holds details about calls to the ListCardData method.
		ListCardData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EncryptionKey is the encryptionKey argument value.
			EncryptionKey []byte
		}
		// ListCredentials holds details about calls to the ListCredentials method.
		ListCredentials []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EncryptionKey is the encryptionKey argument value.
			EncryptionKey []byte
		}
		// ListTextData holds details about calls to the ListTextData method.
		ListTextData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EncryptionKey is the encryptionKey argument value.
			EncryptionKey []byte
		}
	}
	lockAddBinaryData    sync.RWMutex
	lockAddCardData      sync.RWMutex
	lockAddCredential    sync.RWMutex
	lockAddTextData      sync.RWMutex
	lockDeleteBinaryData sync.RWMutex
	lockDeleteCardData   sync.RWMutex
	lockDeleteCredential sync.RWMutex
	lockDeleteTextData   sync.RWMutex
	lockGetBinaryData    sync.RWMutex
	lockGetCardData      sync.RWMutex
	lockGetCredential    sync.RWMutex
	lockGetTextData      sync.RWMutex
	lockListBinaryData   sync.RWMutex
	lockListCardData     sync.RWMutex
	lockListCredentials  sync.RWMutex
	lockListTextData     sync.RWMutex
}

// AddBinaryData calls AddBinaryDataFunc.
func (mock *ServiceMock) AddBinaryData(ctx context.Context, userID string, nodeID string, encryptionKey []byte, binary *models.BinaryData) error {
	if mock.AddBinaryDataFunc == nil {
		panic("ServiceMock.AddBinaryDataFunc: method is nil but Service.AddBinaryData was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		UserID        string
		NodeID        string
		EncryptionKey []byte
		Binary        *models.BinaryData
	}{
		Ctx:           ctx,
		UserID:        userID,
		NodeID:        nodeID,
		EncryptionKey: encryptionKey,
		Binary:        binary,
	}
	mock.lockAddBinaryData.Lock()
	mock.calls.AddBinaryData = append(mock.calls.AddBinaryData, callInfo)
	mock.lockAddBinaryData.Unlock()
	return mock.AddBinaryDataFunc(ctx, userID, nodeID, encryptionKey, binary)
}

// AddBinaryDataCalls gets all the calls that were made to AddBinaryData.
// Check the length with:
//
//	len(mockedService.AddBinaryDataCalls())
func (mock *ServiceMock) AddBinaryDataCalls() []struct {
	Ctx           context.Context
	UserID        string
	NodeID        string
	EncryptionKey []byte
	Binary        *models.BinaryData
} {
	var calls []struct {
		Ctx           context.Context
		UserID        string
		NodeID        string
		EncryptionKey []byte
		Binary        *models.BinaryData
	}
	mock.lockAddBinaryData.RLock()
	calls = mock.calls.AddBinaryData
	mock.lockAddBinaryData.RUnlock()
	return calls
}

// AddCardData calls AddCardDataFunc.
func (mock *ServiceMock) AddCardData(ctx context.Context, userID string, nodeID string, encryptionKey []byte, card *models.CardData) error {
	if mock.AddCardDataFunc == nil {
		panic("ServiceMock.AddCardDataFunc: method is nil but Service.AddCardData was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		UserID        string
		NodeID        string
		EncryptionKey []byte
		Card          *models.CardData
	}{
		Ctx:           ctx,
		UserID:        userID,
		NodeID:        nodeID,
		EncryptionKey: encryptionKey,
		Card:          card,
	}
	mock.lockAddCardData.Lock()
	mock.calls.AddCardData = append(mock.calls.AddCardData, callInfo)
	mock.lockAddCardData.Unlock()
	return mock.AddCardDataFunc(ctx, userID, nodeID, encryptionKey, card)
}

// AddCardDataCalls gets all the calls that were made to AddCardData.
// Check the length with:
//
//	len(mockedService.AddCardDataCalls())
func (mock *ServiceMock) AddCardDataCalls() []struct {
	Ctx           context.Context
	UserID        string
	NodeID        string
	EncryptionKey []byte
	Card          *models.CardData
} {
	var calls []struct {
		Ctx           context.Context
		UserID        string
		NodeID        string
		EncryptionKey []byte
		Card          *models.CardData
	}
	mock.lockAddCardData.RLock()
	calls = mock.calls.AddCardData
	mock.lockAddCardData.RUnlock()
	return calls
}

// AddCredential calls AddCredentialFunc.
func (mock *ServiceMock) AddCredential(ctx context.Context, userID string, nodeID string, encryptionKey []byte, cred *models.Credential) error {
	if mock.AddCredentialFunc == nil {
		panic("ServiceMock.AddCredentialFunc: method is nil but Service.AddCredential was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		UserID        string
		NodeID        string
		EncryptionKey []byte
		Cred          *models.Credential
	}{
		Ctx:           ctx,
		UserID:        userID,
		NodeID:        nodeID,
		EncryptionKey: encryptionKey,
		Cred:          cred,
	}
	mock.lockAddCredential.Lock()
	mock.calls.AddCredential = append(mock.calls.AddCredential, callInfo)
	mock.lockAddCredential.Unlock()
	return mock.AddCredentialFunc(ctx, userID, nodeID, encryptionKey, cred)
}

// AddCredentialCalls gets all the calls that were made to AddCredential.
// Check the length with:
//
//	len(mockedService.AddCredentialCalls())
func (mock *ServiceMock) AddCredentialCalls() []struct {
	Ctx           context.Context
	UserID        string
	NodeID        string
	EncryptionKey []byte
	Cred          *models.Credential
} {
	var calls []struct {
		Ctx           context.Context
		UserID        string
		NodeID        string
		EncryptionKey []byte
		Cred          *models.Credential
	}
	mock.lockAddCredential.RLock()
	calls = mock.calls.AddCredential
	mock.lockAddCredential.RUnlock()
	return calls
}

// AddTextData calls AddTextDataFunc.
func (mock *ServiceMock) AddTextData(ctx context.Context, userID string, nodeID string, encryptionKey []byte, text *models.TextData) error {
	if mock.AddTextDataFunc == nil {
		panic("ServiceMock.AddTextDataFunc: method is nil but Service.AddTextData was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		UserID        string
		NodeID        string
		EncryptionKey []byte
		Text          *models.TextData
	}{
		Ctx:           ctx,
		UserID:        userID,
		NodeID:        nodeID,
		EncryptionKey: encryptionKey,
		Text:          text,
	}
	mock.lockAddTextData.Lock()
	mock.calls.AddTextData = append(mock.calls.AddTextData, callInfo)
	mock.lockAddTextData.Unlock()
	return mock.AddTextDataFunc(ctx, userID, nodeID, encryptionKey, text)
}

// AddTextDataCalls gets all the calls that were made to AddTextData.
// Check the length with:
//
//	len(mockedService.AddTextDataCalls())
func (mock *ServiceMock) AddTextDataCalls() []struct {
	Ctx           context.Context
	UserID        string
	NodeID        string
	EncryptionKey []byte
	Text          *models.TextData
} {
	var calls []struct {
		Ctx           context.Context
		UserID        string
		NodeID        string
		EncryptionKey []byte
		Text          *models.TextData
	}
	mock.lockAddTextData.RLock()
	calls = mock.calls.AddTextData
	mock.lockAddTextData.RUnlock()
	return calls
}

// DeleteBinaryData calls DeleteBinaryDataFunc.
func (mock *ServiceMock) DeleteBinaryData(ctx context.Context, id string, nodeID string) error {
	if mock.DeleteBinaryDataFunc == nil {
		panic("ServiceMock.DeleteBinaryDataFunc: method is nil but Service.DeleteBinaryData was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     string
		NodeID string
	}{
		Ctx:    ctx,
		ID:     id,
		NodeID: nodeID,
	}
	mock.lockDeleteBinaryData.Lock()
	mock.calls.DeleteBinaryData = append(mock.calls.DeleteBinaryData, callInfo)
	mock.lockDeleteBinaryData.Unlock()
	return mock.DeleteBinaryDataFunc(ctx, id, nodeID)
}

// DeleteBinaryDataCalls gets all the calls that were made to DeleteBinaryData.
// Check the length with:
//
//	len(mockedService.DeleteBinaryDataCalls())
func (mock *ServiceMock) DeleteBinaryDataCalls() []struct {
	Ctx    context.Context
	ID     string
	NodeID string
} {
	var calls []struct {
		Ctx    context.Context
		ID     string
		NodeID string
	}
	mock.lockDeleteBinaryData.RLock()
	calls = mock.calls.DeleteBinaryData
	mock.lockDeleteBinaryData.RUnlock()
	return calls
}

// DeleteCardData calls DeleteCardDataFunc.
func (mock *ServiceMock) DeleteCardData(ctx context.Context, id string, nodeID string) error {
	if mock.DeleteCardDataFunc == nil {
		panic("ServiceMock.DeleteCardDataFunc: method is nil but Service.DeleteCardData was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     string
		NodeID string
	}{
		Ctx:    ctx,
		ID:     id,
		NodeID: nodeID,
	}
	mock.lockDeleteCardData.Lock()
	mock.calls.DeleteCardData = append(mock.calls.DeleteCardData, callInfo)
	mock.lockDeleteCardData.Unlock()
	return mock.DeleteCardDataFunc(ctx, id, nodeID)
}

// DeleteCardDataCalls gets all the calls that were made to DeleteCardData.
// Check the length with:
//
//	len(mockedService.DeleteCardDataCalls())
func (mock *ServiceMock) DeleteCardDataCalls() []struct {
	Ctx    context.Context
	ID     string
	NodeID string
} {
	var calls []struct {
		Ctx    context.Context
		ID     string
		NodeID string
	}
	mock.lockDeleteCardData.RLock()
	calls = mock.calls.DeleteCardData
	mock.lockDeleteCardData.RUnlock()
	return calls
}

// DeleteCredential calls DeleteCredentialFunc.
func (mock *ServiceMock) DeleteCredential(ctx context.Context, id string, nodeID string) error {
	if mock.DeleteCredentialFunc == nil {
		panic("ServiceMock.DeleteCredentialFunc: method is nil but Service.DeleteCredential was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     string
		NodeID string
	}{
		Ctx:    ctx,
		ID:     id,
		NodeID: nodeID,
	}
	mock.lockDeleteCredential.Lock()
	mock.calls.DeleteCredential = append(mock.calls.DeleteCredential, callInfo)
	mock.lockDeleteCredential.Unlock()
	return mock.DeleteCredentialFunc(ctx, id, nodeID)
}

// DeleteCredentialCalls gets all the calls that were made to DeleteCredential.
// Check the length with:
//
//	len(mockedService.DeleteCredentialCalls())
func (mock *ServiceMock) DeleteCredentialCalls() []struct {
	Ctx    context.Context
	ID     string
	NodeID string
} {
	var calls []struct {
		Ctx    context.Context
		ID     string
		NodeID string
	}
	mock.lockDeleteCredential.RLock()
	calls = mock.calls.DeleteCredential
	mock.lockDeleteCredential.RUnlock()
	return calls
}

// DeleteTextData calls DeleteTextDataFunc.
func (mock *ServiceMock) DeleteTextData(ctx context.Context, id string, nodeID string) error {
	if mock.DeleteTextDataFunc == nil {
		panic("ServiceMock.DeleteTextDataFunc: method is nil but Service.DeleteTextData was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     string
		NodeID string
	}{
		Ctx:    ctx,
		ID:     id,
		NodeID: nodeID,
	}
	mock.lockDeleteTextData.Lock()
	mock.calls.DeleteTextData = append(mock.calls.DeleteTextData, callInfo)
	mock.lockDeleteTextData.Unlock()
	return mock.DeleteTextDataFunc(ctx, id, nodeID)
}

// DeleteTextDataCalls gets all the calls that were made to DeleteTextData.
// Check the length with:
//
//	len(mockedService.DeleteTextDataCalls())
func (mock *ServiceMock) DeleteTextDataCalls() []struct {
	Ctx    context.Context
	ID     string
	NodeID string
} {
	var calls []struct {
		Ctx    context.Context
		ID     string
		NodeID string
	}
	mock.lockDeleteTextData.RLock()
	calls = mock.calls.DeleteTextData
	mock.lockDeleteTextData.RUnlock()
	return calls
}

// GetBinaryData calls GetBinaryDataFunc.
func (mock *ServiceMock) GetBinaryData(ctx context.Context, id string, encryptionKey []byte) (*models.BinaryData, error) {
	if mock.GetBinaryDataFunc == nil {
		panic("ServiceMock.GetBinaryDataFunc: method is nil but Service.GetBinaryData was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ID            string
		EncryptionKey []byte
	}{
		Ctx:           ctx,
		ID:            id,
		EncryptionKey: encryptionKey,
	}
	mock.lockGetBinaryData.Lock()
	mock.calls.GetBinaryData = append(mock.calls.GetBinaryData, callInfo)
	mock.lockGetBinaryData.Unlock()
	return mock.GetBinaryDataFunc(ctx, id, encryptionKey)
}

// GetBinaryDataCalls gets all the calls that were made to GetBinaryData.
// Check the length with:
//
//	len(mockedService.GetBinaryDataCalls())
func (mock *ServiceMock) GetBinaryDataCalls() []struct {
	Ctx           context.Context
	ID            string
	EncryptionKey []byte
} {
	var calls []struct {
		Ctx           context.Context
		ID            string
		EncryptionKey []byte
	}
	mock.lockGetBinaryData.RLock()
	calls = mock.calls.GetBinaryData
	mock.lockGetBinaryData.RUnlock()
	return calls
}

// GetCardData calls GetCardDataFunc.
func (mock *ServiceMock) GetCardData(ctx context.Context, id string, encryptionKey []byte) (*models.CardData, error) {
	if mock.GetCardDataFunc == nil {
		panic("ServiceMock.GetCardDataFunc: method is nil but Service.GetCardData was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ID            string
		EncryptionKey []byte
	}{
		Ctx:           ctx,
		ID:            id,
		EncryptionKey: encryptionKey,
	}
	mock.lockGetCardData.Lock()
	mock.calls.GetCardData = append(mock.calls.GetCardData, callInfo)
	mock.lockGetCardData.Unlock()
	return mock.GetCardDataFunc(ctx, id, encryptionKey)
}

// GetCardDataCalls gets all the calls that were made to GetCardData.
// Check the length with:
//
//	len(mockedService.GetCardDataCalls())
func (mock *ServiceMock) GetCardDataCalls() []struct {
	Ctx           context.Context
	ID            string
	EncryptionKey []byte
} {
	var calls []struct {
		Ctx           context.Context
		ID            string
		EncryptionKey []byte
	}
	mock.lockGetCardData.RLock()
	calls = mock.calls.GetCardData
	mock.lockGetCardData.RUnlock()
	return calls
}

// GetCredential calls GetCredentialFunc.
func (mock *ServiceMock) GetCredential(ctx context.Context, id string, encryptionKey []byte) (*models.Credential, error) {
	if mock.GetCredentialFunc == nil {
		panic("ServiceMock.GetCredentialFunc: method is nil but Service.GetCredential was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ID            string
		EncryptionKey []byte
	}{
		Ctx:           ctx,
		ID:            id,
		EncryptionKey: encryptionKey,
	}
	mock.lockGetCredential.Lock()
	mock.calls.GetCredential = append(mock.calls.GetCredential, callInfo)
	mock.lockGetCredential.Unlock()
	return mock.GetCredentialFunc(ctx, id, encryptionKey)
}

// GetCredentialCalls gets all the calls that were made to GetCredential.
// Check the length with:
//
//	len(mockedService.GetCredentialCalls())
func (mock *ServiceMock) GetCredentialCalls() []struct {
	Ctx           context.Context
	ID            string
	EncryptionKey []byte
} {
	var calls []struct {
		Ctx           context.Context
		ID            string
		EncryptionKey []byte
	}
	mock.lockGetCredential.RLock()
	calls = mock.calls.GetCredential
	mock.lockGetCredential.RUnlock()
	return calls
}

// GetTextData calls GetTextDataFunc.
func (mock *ServiceMock) GetTextData(ctx context.Context, id string, encryptionKey []byte) (*models.TextData, error) {
	if mock.GetTextDataFunc == nil {
		panic("ServiceMock.GetTextDataFunc: method is nil but Service.GetTextData was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ID            string
		EncryptionKey []byte
	}{
		Ctx:           ctx,
		ID:            id,
		EncryptionKey: encryptionKey,
	}
	mock.lockGetTextData.Lock()
	mock.calls.GetTextData = append(mock.calls.GetTextData, callInfo)
	mock.lockGetTextData.Unlock()
	return mock.GetTextDataFunc(ctx, id, encryptionKey)
}

// GetTextDataCalls gets all the calls that were made to GetTextData.
// Check the length with:
//
//	len(mockedService.GetTextDataCalls())
func (mock *ServiceMock) GetTextDataCalls() []struct {
	Ctx           context.Context
	ID            string
	EncryptionKey []byte
} {
	var calls []struct {
		Ctx           context.Context
		ID            string
		EncryptionKey []byte
	}
	mock.lockGetTextData.RLock()
	calls = mock.calls.GetTextData
	mock.lockGetTextData.RUnlock()
	return calls
}

// ListBinaryData calls ListBinaryDataFunc.
func (mock *ServiceMock) ListBinaryData(ctx context.Context, encryptionKey []byte) ([]*models.BinaryData, error) {
	if mock.ListBinaryDataFunc == nil {
		panic("ServiceMock.ListBinaryDataFunc: method is nil but Service.ListBinaryData was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		EncryptionKey []byte
	}{
		Ctx:           ctx,
		EncryptionKey: encryptionKey,
	}
	mock.lockListBinaryData.Lock()
	mock.calls.ListBinaryData = append(mock.calls.ListBinaryData, callInfo)
	mock.lockListBinaryData.Unlock()
	return mock.ListBinaryDataFunc(ctx, encryptionKey)
}

// ListBinaryDataCalls gets all the calls that were made to ListBinaryData.
// Check the length with:
//
//	len(mockedService.ListBinaryDataCalls())
func (mock *ServiceMock) ListBinaryDataCalls() []struct {
	Ctx           context.Context
	EncryptionKey []byte
} {
	var calls []struct {
		Ctx           context.Context
		EncryptionKey []byte
	}
	mock.lockListBinaryData.RLock()
	calls = mock.calls.ListBinaryData
	mock.lockListBinaryData.RUnlock()
	return calls
}

// ListCardData calls ListCardDataFunc.
func (mock *ServiceMock) ListCardData(ctx context.Context, encryptionKey []byte) ([]*models.CardData, error) {
	if mock.ListCardDataFunc == nil {
		panic("ServiceMock.ListCardDataFunc: method is nil but Service.ListCardData was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		EncryptionKey []byte
	}{
		Ctx:           ctx,
		EncryptionKey: encryptionKey,
	}
	mock.lockListCardData.Lock()
	mock.calls.ListCardData = append(mock.calls.ListCardData, callInfo)
	mock.lockListCardData.Unlock()
	return mock.ListCardDataFunc(ctx, encryptionKey)
}

// ListCardDataCalls gets all the calls that were made to ListCardData.
// Check the length with:
//
//	len(mockedService.ListCardDataCalls())
func (mock *ServiceMock) ListCardDataCalls() []struct {
	Ctx           context.Context
	EncryptionKey []byte
} {
	var calls []struct {
		Ctx           context.Context
		EncryptionKey []byte
	}
	mock.lockListCardData.RLock()
	calls = mock.calls.ListCardData
	mock.lockListCardData.RUnlock()
	return calls
}

// ListCredentials calls ListCredentialsFunc.
func (mock *ServiceMock) ListCredentials(ctx context.Context, encryptionKey []byte) ([]*models.Credential, error) {
	if mock.ListCredentialsFunc == nil {
		panic("ServiceMock.ListCredentialsFunc: method is nil but Service.ListCredentials was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		EncryptionKey []byte
	}{
		Ctx:           ctx,
		EncryptionKey: encryptionKey,
	}
	mock.lockListCredentials.Lock()
	mock.calls.ListCredentials = append(mock.calls.ListCredentials, callInfo)
	mock.lockListCredentials.Unlock()
	return mock.ListCredentialsFunc(ctx, encryptionKey)
}

// ListCredentialsCalls gets all the calls that were made to ListCredentials.
// Check the length with:
//
//	len(mockedService.ListCredentialsCalls())
func (mock *ServiceMock) ListCredentialsCalls() []struct {
	Ctx           context.Context
	EncryptionKey []byte
} {
	var calls []struct {
		Ctx           context.Context
		EncryptionKey []byte
	}
	mock.lockListCredentials.RLock()
	calls = mock.calls.ListCredentials
	mock.lockListCredentials.RUnlock()
	return calls
}

// ListTextData calls ListTextDataFunc.
func (mock *ServiceMock) ListTextData(ctx context.Context, encryptionKey []byte) ([]*models.TextData, error) {
	if mock.ListTextDataFunc == nil {
		panic("ServiceMock.ListTextDataFunc: method is nil but Service.ListTextData was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		EncryptionKey []byte
	}{
		Ctx:           ctx,
		EncryptionKey: encryptionKey,
	}
	mock.lockListTextData.Lock()
	mock.calls.ListTextData = append(mock.calls.ListTextData, callInfo)
	mock.lockListTextData.Unlock()
	return mock.ListTextDataFunc(ctx, encryptionKey)
}

// ListTextDataCalls gets all the calls that were made to ListTextData.
// Check the length with:
//
//	len(mockedService.ListTextDataCalls())
func (mock *ServiceMock) ListTextDataCalls() []struct {
	Ctx           context.Context
	EncryptionKey []byte
} {
	var calls []struct {
		Ctx           context.Context
		EncryptionKey []byte
	}
	mock.lockListTextData.RLock()
	calls = mock.calls.ListTextData
	mock.lockListTextData.RUnlock()
	return calls
}
