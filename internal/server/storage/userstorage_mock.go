// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"github.com/iudanet/gophkeeper/internal/models"
	"sync"
	"time"
)

// Ensure, that UserStorageMock does implement UserStorage.
// If this is not the case, regenerate this file with moq.
var _ UserStorage = &UserStorageMock{}

// UserStorageMock is a mock implementation of UserStorage.
//
//	func TestSomethingThatUsesUserStorage(t *testing.T) {
//
//		// make and configure a mocked UserStorage
//		mockedUserStorage := &UserStorageMock{
//			CreateUserFunc: func(ctx context.Context, user *models.User) error {
//				panic("mock out the CreateUser method")
//			},
//			DeleteUserFunc: func(ctx context.Context, userID string) error {
//				panic("mock out the DeleteUser method")
//			},
//			GetUserByIDFunc: func(ctx context.Context, userID string) (*models.User, error) {
//				panic("mock out the GetUserByID method")
//			},
//			GetUserByUsernameFunc: func(ctx context.Context, username string) (*models.User, error) {
//				panic("mock out the GetUserByUsername method")
//			},
//			UpdateLastLoginFunc: func(ctx context.Context, userID string, lastLogin time.Time) error {
//				panic("mock out the UpdateLastLogin method")
//			},
//			UpdateUserFunc: func(ctx context.Context, user *models.User) error {
//				panic("mock out the UpdateUser method")
//			},
//		}
//
//		// use mockedUserStorage in code that requires UserStorage
//		// and then make assertions.
//
//	}
type UserStorageMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, user *models.User) error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(ctx context.Context, userID string) error

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(ctx context.Context, userID string) (*models.User, error)

	// GetUserByUsernameFunc mocks the GetUserByUsername method.
	GetUserByUsernameFunc func(ctx context.Context, username string) (*models.User, error)

	// UpdateLastLoginFunc mocks the UpdateLastLogin method.
	UpdateLastLoginFunc func(ctx context.Context, userID string, lastLogin time.Time) error

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(ctx context.Context, user *models.User) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *models.User
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// GetUserByUsername holds details about calls to the GetUserByUsername method.
		GetUserByUsername []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// UpdateLastLogin holds details about calls to the UpdateLastLogin method.
		UpdateLastLogin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// LastLogin is the lastLogin argument value.
			LastLogin time.Time
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *models.User
		}
	}
	lockCreateUser        sync.RWMutex
	lockDeleteUser        sync.RWMutex
	lockGetUserByID       sync.RWMutex
	lockGetUserByUsername sync.RWMutex
	lockUpdateLastLogin   sync.RWMutex
	lockUpdateUser        sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *UserStorageMock) CreateUser(ctx context.Context, user *models.User) error {
	if mock.CreateUserFunc == nil {
		panic("UserStorageMock.CreateUserFunc: method is nil but UserStorage.CreateUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *models.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUserStorage.CreateUserCalls())
func (mock *UserStorageMock) CreateUserCalls() []struct {
	Ctx  context.Context
	User *models.User
} {
	var calls []struct {
		Ctx  context.Context
		User *models.User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *UserStorageMock) DeleteUser(ctx context.Context, userID string) error {
	if mock.DeleteUserFunc == nil {
		panic("UserStorageMock.DeleteUserFunc: method is nil but UserStorage.DeleteUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(ctx, userID)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedUserStorage.DeleteUserCalls())
func (mock *UserStorageMock) DeleteUserCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *UserStorageMock) GetUserByID(ctx context.Context, userID string) (*models.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("UserStorageMock.GetUserByIDFunc: method is nil but UserStorage.GetUserByID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(ctx, userID)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//
//	len(mockedUserStorage.GetUserByIDCalls())
func (mock *UserStorageMock) GetUserByIDCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// GetUserByUsername calls GetUserByUsernameFunc.
func (mock *UserStorageMock) GetUserByUsername(ctx context.Context, username string) (*models.User, error) {
	if mock.GetUserByUsernameFunc == nil {
		panic("UserStorageMock.GetUserByUsernameFunc: method is nil but UserStorage.GetUserByUsername was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	mock.lockGetUserByUsername.Lock()
	mock.calls.GetUserByUsername = append(mock.calls.GetUserByUsername, callInfo)
	mock.lockGetUserByUsername.Unlock()
	return mock.GetUserByUsernameFunc(ctx, username)
}

// GetUserByUsernameCalls gets all the calls that were made to GetUserByUsername.
// Check the length with:
//
//	len(mockedUserStorage.GetUserByUsernameCalls())
func (mock *UserStorageMock) GetUserByUsernameCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	mock.lockGetUserByUsername.RLock()
	calls = mock.calls.GetUserByUsername
	mock.lockGetUserByUsername.RUnlock()
	return calls
}

// UpdateLastLogin calls UpdateLastLoginFunc.
func (mock *UserStorageMock) UpdateLastLogin(ctx context.Context, userID string, lastLogin time.Time) error {
	if mock.UpdateLastLoginFunc == nil {
		panic("UserStorageMock.UpdateLastLoginFunc: method is nil but UserStorage.UpdateLastLogin was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		UserID    string
		LastLogin time.Time
	}{
		Ctx:       ctx,
		UserID:    userID,
		LastLogin: lastLogin,
	}
	mock.lockUpdateLastLogin.Lock()
	mock.calls.UpdateLastLogin = append(mock.calls.UpdateLastLogin, callInfo)
	mock.lockUpdateLastLogin.Unlock()
	return mock.UpdateLastLoginFunc(ctx, userID, lastLogin)
}

// UpdateLastLoginCalls gets all the calls that were made to UpdateLastLogin.
// Check the length with:
//
//	len(mockedUserStorage.UpdateLastLoginCalls())
func (mock *UserStorageMock) UpdateLastLoginCalls() []struct {
	Ctx       context.Context
	UserID    string
	LastLogin time.Time
} {
	var calls []struct {
		Ctx       context.Context
		UserID    string
		LastLogin time.Time
	}
	mock.lockUpdateLastLogin.RLock()
	calls = mock.calls.UpdateLastLogin
	mock.lockUpdateLastLogin.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *UserStorageMock) UpdateUser(ctx context.Context, user *models.User) error {
	if mock.UpdateUserFunc == nil {
		panic("UserStorageMock.UpdateUserFunc: method is nil but UserStorage.UpdateUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *models.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(ctx, user)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//
//	len(mockedUserStorage.UpdateUserCalls())
func (mock *UserStorageMock) UpdateUserCalls() []struct {
	Ctx  context.Context
	User *models.User
} {
	var calls []struct {
		Ctx  context.Context
		User *models.User
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}
