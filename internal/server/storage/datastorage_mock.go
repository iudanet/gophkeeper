// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"github.com/iudanet/gophkeeper/internal/models"
	"sync"
)

// Ensure, that DataStorageMock does implement DataStorage.
// If this is not the case, regenerate this file with moq.
var _ DataStorage = &DataStorageMock{}

// DataStorageMock is a mock implementation of DataStorage.
//
//	func TestSomethingThatUsesDataStorage(t *testing.T) {
//
//		// make and configure a mocked DataStorage
//		mockedDataStorage := &DataStorageMock{
//			DeleteEntryFunc: func(ctx context.Context, id string, timestamp int64, nodeID string) error {
//				panic("mock out the DeleteEntry method")
//			},
//			GetEntryFunc: func(ctx context.Context, id string) (*models.CRDTEntry, error) {
//				panic("mock out the GetEntry method")
//			},
//			GetUserEntriesFunc: func(ctx context.Context, userID string) ([]*models.CRDTEntry, error) {
//				panic("mock out the GetUserEntries method")
//			},
//			GetUserEntriesByTypeFunc: func(ctx context.Context, userID string, dataType string) ([]*models.CRDTEntry, error) {
//				panic("mock out the GetUserEntriesByType method")
//			},
//			GetUserEntriesSinceFunc: func(ctx context.Context, userID string, since int64) ([]*models.CRDTEntry, error) {
//				panic("mock out the GetUserEntriesSince method")
//			},
//			SaveEntryFunc: func(ctx context.Context, entry *models.CRDTEntry) (bool, error) {
//				panic("mock out the SaveEntry method")
//			},
//		}
//
//		// use mockedDataStorage in code that requires DataStorage
//		// and then make assertions.
//
//	}
type DataStorageMock struct {
	// DeleteEntryFunc mocks the DeleteEntry method.
	DeleteEntryFunc func(ctx context.Context, id string, timestamp int64, nodeID string) error

	// GetEntryFunc mocks the GetEntry method.
	GetEntryFunc func(ctx context.Context, id string) (*models.CRDTEntry, error)

	// GetUserEntriesFunc mocks the GetUserEntries method.
	GetUserEntriesFunc func(ctx context.Context, userID string) ([]*models.CRDTEntry, error)

	// GetUserEntriesByTypeFunc mocks the GetUserEntriesByType method.
	GetUserEntriesByTypeFunc func(ctx context.Context, userID string, dataType string) ([]*models.CRDTEntry, error)

	// GetUserEntriesSinceFunc mocks the GetUserEntriesSince method.
	GetUserEntriesSinceFunc func(ctx context.Context, userID string, since int64) ([]*models.CRDTEntry, error)

	// SaveEntryFunc mocks the SaveEntry method.
	SaveEntryFunc func(ctx context.Context, entry *models.CRDTEntry) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteEntry holds details about calls to the DeleteEntry method.
		DeleteEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Timestamp is the timestamp argument value.
			Timestamp int64
			// NodeID is the nodeID argument value.
			NodeID string
		}
		// GetEntry holds details about calls to the GetEntry method.
		GetEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetUserEntries holds details about calls to the GetUserEntries method.
		GetUserEntries []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// GetUserEntriesByType holds details about calls to the GetUserEntriesByType method.
		GetUserEntriesByType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// DataType is the dataType argument value.
			DataType string
		}
		// GetUserEntriesSince holds details about calls to the GetUserEntriesSince method.
		GetUserEntriesSince []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// Since is the since argument value.
			Since int64
		}
		// SaveEntry holds details about calls to the SaveEntry method.
		SaveEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Entry is the entry argument value.
			Entry *models.CRDTEntry
		}
	}
	lockDeleteEntry          sync.RWMutex
	lockGetEntry             sync.RWMutex
	lockGetUserEntries       sync.RWMutex
	lockGetUserEntriesByType sync.RWMutex
	lockGetUserEntriesSince  sync.RWMutex
	lockSaveEntry            sync.RWMutex
}

// DeleteEntry calls DeleteEntryFunc.
func (mock *DataStorageMock) DeleteEntry(ctx context.Context, id string, timestamp int64, nodeID string) error {
	if mock.DeleteEntryFunc == nil {
		panic("DataStorageMock.DeleteEntryFunc: method is nil but DataStorage.DeleteEntry was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ID        string
		Timestamp int64
		NodeID    string
	}{
		Ctx:       ctx,
		ID:        id,
		Timestamp: timestamp,
		NodeID:    nodeID,
	}
	mock.lockDeleteEntry.Lock()
	mock.calls.DeleteEntry = append(mock.calls.DeleteEntry, callInfo)
	mock.lockDeleteEntry.Unlock()
	return mock.DeleteEntryFunc(ctx, id, timestamp, nodeID)
}

// DeleteEntryCalls gets all the calls that were made to DeleteEntry.
// Check the length with:
//
//	len(mockedDataStorage.DeleteEntryCalls())
func (mock *DataStorageMock) DeleteEntryCalls() []struct {
	Ctx       context.Context
	ID        string
	Timestamp int64
	NodeID    string
} {
	var calls []struct {
		Ctx       context.Context
		ID        string
		Timestamp int64
		NodeID    string
	}
	mock.lockDeleteEntry.RLock()
	calls = mock.calls.DeleteEntry
	mock.lockDeleteEntry.RUnlock()
	return calls
}

// GetEntry calls GetEntryFunc.
func (mock *DataStorageMock) GetEntry(ctx context.Context, id string) (*models.CRDTEntry, error) {
	if mock.GetEntryFunc == nil {
		panic("DataStorageMock.GetEntryFunc: method is nil but DataStorage.GetEntry was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetEntry.Lock()
	mock.calls.GetEntry = append(mock.calls.GetEntry, callInfo)
	mock.lockGetEntry.Unlock()
	return mock.GetEntryFunc(ctx, id)
}

// GetEntryCalls gets all the calls that were made to GetEntry.
// Check the length with:
//
//	len(mockedDataStorage.GetEntryCalls())
func (mock *DataStorageMock) GetEntryCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetEntry.RLock()
	calls = mock.calls.GetEntry
	mock.lockGetEntry.RUnlock()
	return calls
}

// GetUserEntries calls GetUserEntriesFunc.
func (mock *DataStorageMock) GetUserEntries(ctx context.Context, userID string) ([]*models.CRDTEntry, error) {
	if mock.GetUserEntriesFunc == nil {
		panic("DataStorageMock.GetUserEntriesFunc: method is nil but DataStorage.GetUserEntries was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetUserEntries.Lock()
	mock.calls.GetUserEntries = append(mock.calls.GetUserEntries, callInfo)
	mock.lockGetUserEntries.Unlock()
	return mock.GetUserEntriesFunc(ctx, userID)
}

// GetUserEntriesCalls gets all the calls that were made to GetUserEntries.
// Check the length with:
//
//	len(mockedDataStorage.GetUserEntriesCalls())
func (mock *DataStorageMock) GetUserEntriesCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockGetUserEntries.RLock()
	calls = mock.calls.GetUserEntries
	mock.lockGetUserEntries.RUnlock()
	return calls
}

// GetUserEntriesByType calls GetUserEntriesByTypeFunc.
func (mock *DataStorageMock) GetUserEntriesByType(ctx context.Context, userID string, dataType string) ([]*models.CRDTEntry, error) {
	if mock.GetUserEntriesByTypeFunc == nil {
		panic("DataStorageMock.GetUserEntriesByTypeFunc: method is nil but DataStorage.GetUserEntriesByType was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		UserID   string
		DataType string
	}{
		Ctx:      ctx,
		UserID:   userID,
		DataType: dataType,
	}
	mock.lockGetUserEntriesByType.Lock()
	mock.calls.GetUserEntriesByType = append(mock.calls.GetUserEntriesByType, callInfo)
	mock.lockGetUserEntriesByType.Unlock()
	return mock.GetUserEntriesByTypeFunc(ctx, userID, dataType)
}

// GetUserEntriesByTypeCalls gets all the calls that were made to GetUserEntriesByType.
// Check the length with:
//
//	len(mockedDataStorage.GetUserEntriesByTypeCalls())
func (mock *DataStorageMock) GetUserEntriesByTypeCalls() []struct {
	Ctx      context.Context
	UserID   string
	DataType string
} {
	var calls []struct {
		Ctx      context.Context
		UserID   string
		DataType string
	}
	mock.lockGetUserEntriesByType.RLock()
	calls = mock.calls.GetUserEntriesByType
	mock.lockGetUserEntriesByType.RUnlock()
	return calls
}

// GetUserEntriesSince calls GetUserEntriesSinceFunc.
func (mock *DataStorageMock) GetUserEntriesSince(ctx context.Context, userID string, since int64) ([]*models.CRDTEntry, error) {
	if mock.GetUserEntriesSinceFunc == nil {
		panic("DataStorageMock.GetUserEntriesSinceFunc: method is nil but DataStorage.GetUserEntriesSince was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
		Since  int64
	}{
		Ctx:    ctx,
		UserID: userID,
		Since:  since,
	}
	mock.lockGetUserEntriesSince.Lock()
	mock.calls.GetUserEntriesSince = append(mock.calls.GetUserEntriesSince, callInfo)
	mock.lockGetUserEntriesSince.Unlock()
	return mock.GetUserEntriesSinceFunc(ctx, userID, since)
}

// GetUserEntriesSinceCalls gets all the calls that were made to GetUserEntriesSince.
// Check the length with:
//
//	len(mockedDataStorage.GetUserEntriesSinceCalls())
func (mock *DataStorageMock) GetUserEntriesSinceCalls() []struct {
	Ctx    context.Context
	UserID string
	Since  int64
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
		Since  int64
	}
	mock.lockGetUserEntriesSince.RLock()
	calls = mock.calls.GetUserEntriesSince
	mock.lockGetUserEntriesSince.RUnlock()
	return calls
}

// SaveEntry calls SaveEntryFunc.
func (mock *DataStorageMock) SaveEntry(ctx context.Context, entry *models.CRDTEntry) (bool, error) {
	if mock.SaveEntryFunc == nil {
		panic("DataStorageMock.SaveEntryFunc: method is nil but DataStorage.SaveEntry was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Entry *models.CRDTEntry
	}{
		Ctx:   ctx,
		Entry: entry,
	}
	mock.lockSaveEntry.Lock()
	mock.calls.SaveEntry = append(mock.calls.SaveEntry, callInfo)
	mock.lockSaveEntry.Unlock()
	return mock.SaveEntryFunc(ctx, entry)
}

// SaveEntryCalls gets all the calls that were made to SaveEntry.
// Check the length with:
//
//	len(mockedDataStorage.SaveEntryCalls())
func (mock *DataStorageMock) SaveEntryCalls() []struct {
	Ctx   context.Context
	Entry *models.CRDTEntry
} {
	var calls []struct {
		Ctx   context.Context
		Entry *models.CRDTEntry
	}
	mock.lockSaveEntry.RLock()
	calls = mock.calls.SaveEntry
	mock.lockSaveEntry.RUnlock()
	return calls
}
