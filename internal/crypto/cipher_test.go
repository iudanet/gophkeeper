package crypto

import (
	"crypto/rand"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestEncrypt(t *testing.T) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á (32 bytes)
	validKey := make([]byte, 32)
	_, _ = rand.Read(validKey)

	tests := []struct {
		name      string
		errMsg    string
		plaintext []byte
		key       []byte
		wantErr   bool
	}{
		{
			name:      "successful encryption",
			plaintext: []byte("Hello, World!"),
			key:       validKey,
			wantErr:   false,
		},
		{
			name:      "encrypt longer text",
			plaintext: []byte("This is a longer text with multiple words and special characters: !@#$%^&*()"),
			key:       validKey,
			wantErr:   false,
		},
		{
			name:      "empty plaintext",
			plaintext: []byte{},
			key:       validKey,
			wantErr:   true,
			errMsg:    "plaintext cannot be empty",
		},
		{
			name:      "invalid key length - too short",
			plaintext: []byte("test"),
			key:       make([]byte, 16), // –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
			wantErr:   true,
			errMsg:    "encryption key must be 32 bytes",
		},
		{
			name:      "invalid key length - too long",
			plaintext: []byte("test"),
			key:       make([]byte, 64), // –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
			wantErr:   true,
			errMsg:    "encryption key must be 32 bytes",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			encrypted, err := Encrypt(tt.plaintext, tt.key)

			if tt.wantErr {
				require.Error(t, err)
				assert.Contains(t, err.Error(), tt.errMsg)
				assert.Nil(t, encrypted)
			} else {
				require.NoError(t, err)
				assert.NotNil(t, encrypted)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª–∏–Ω–Ω–µ–µ plaintext (nonce + ciphertext + auth_tag)
				// –ú–∏–Ω–∏–º—É–º: NonceSize (12) + len(plaintext) + auth_tag (16)
				expectedMinLen := NonceSize + len(tt.plaintext) + 16
				assert.GreaterOrEqual(t, len(encrypted), expectedMinLen,
					"–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å nonce, ciphertext –∏ auth_tag")

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç plaintext
				assert.NotEqual(t, tt.plaintext, encrypted[NonceSize:],
					"–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç plaintext")
			}
		})
	}
}

func TestDecrypt(t *testing.T) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
	validKey := make([]byte, 32)
	_, _ = rand.Read(validKey)

	// –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	plaintext := []byte("test message")
	validEncrypted, err := Encrypt(plaintext, validKey)
	require.NoError(t, err)

	tests := []struct {
		name      string
		errMsg    string
		encrypted []byte
		key       []byte
		wantErr   bool
	}{
		{
			name:      "successful decryption",
			encrypted: validEncrypted,
			key:       validKey,
			wantErr:   false,
		},
		{
			name:      "encrypted data too short",
			encrypted: make([]byte, 5), // –º–µ–Ω—å—à–µ NonceSize
			key:       validKey,
			wantErr:   true,
			errMsg:    "encrypted data too short",
		},
		{
			name:      "invalid key length",
			encrypted: validEncrypted,
			key:       make([]byte, 16),
			wantErr:   true,
			errMsg:    "encryption key must be 32 bytes",
		},
		{
			name:      "wrong key",
			encrypted: validEncrypted,
			key:       make([]byte, 32), // –¥—Ä—É–≥–æ–π –∫–ª—é—á (–≤—Å–µ –Ω—É–ª–∏)
			wantErr:   true,
			errMsg:    "failed to decrypt",
		},
		{
			name:      "corrupted data",
			encrypted: append([]byte{}, validEncrypted[:len(validEncrypted)-1]...), // —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–π—Ç
			key:       validKey,
			wantErr:   true,
			errMsg:    "failed to decrypt",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			decrypted, err := Decrypt(tt.encrypted, tt.key)

			if tt.wantErr {
				require.Error(t, err)
				assert.Contains(t, err.Error(), tt.errMsg)
				assert.Nil(t, decrypted)
			} else {
				require.NoError(t, err)
				assert.Equal(t, plaintext, decrypted,
					"—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º plaintext")
			}
		})
	}
}

func TestEncryptDecrypt_Integration(t *testing.T) {
	// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: —à–∏—Ñ—Ä—É–µ–º –∏ –¥–µ—à–∏—Ñ—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	key := make([]byte, 32)
	_, _ = rand.Read(key)

	testCases := [][]byte{
		[]byte("Hello, World!"),
		[]byte("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üåç"), // Unicode —Ç–µ–∫—Å—Ç
		[]byte("12345"),
		[]byte(`{"username": "alice", "password": "secret123"}`), // JSON
		make([]byte, 1024),                                       // –±–æ–ª—å—à–æ–π –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π —Å–ª—É—á–∞–π–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	_, _ = rand.Read(testCases[len(testCases)-1])

	for i, plaintext := range testCases {
		t.Run(string(rune('A'+i)), func(t *testing.T) {
			// –®–∏—Ñ—Ä—É–µ–º
			encrypted, err := Encrypt(plaintext, key)
			require.NoError(t, err)

			// –î–µ—à–∏—Ñ—Ä—É–µ–º
			decrypted, err := Decrypt(encrypted, key)
			require.NoError(t, err)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
			assert.Equal(t, plaintext, decrypted,
				"–ø–æ—Å–ª–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
		})
	}
}

func TestEncrypt_Randomness(t *testing.T) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É (–∏–∑-–∑–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ nonce)
	key := make([]byte, 32)
	_, _ = rand.Read(key)
	plaintext := []byte("same data")

	encrypted1, err1 := Encrypt(plaintext, key)
	require.NoError(t, err1)

	encrypted2, err2 := Encrypt(plaintext, key)
	require.NoError(t, err2)

	// –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏
	assert.NotEqual(t, encrypted1, encrypted2,
		"–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ plaintext –¥–æ–ª–∂–Ω—ã —à–∏—Ñ—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É –∏–∑-–∑–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ nonce")

	// –ù–æ –æ–±–∞ –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å—Å—è
	decrypted1, _ := Decrypt(encrypted1, key)
	decrypted2, _ := Decrypt(encrypted2, key)
	assert.Equal(t, plaintext, decrypted1)
	assert.Equal(t, plaintext, decrypted2)
}

func TestEncryptToBase64(t *testing.T) {
	key := make([]byte, 32)
	_, _ = rand.Read(key)

	tests := []struct {
		name      string
		plaintext []byte
		key       []byte
		wantErr   bool
	}{
		{
			name:      "successful encryption to base64",
			plaintext: []byte("test data"),
			key:       key,
			wantErr:   false,
		},
		{
			name:      "empty plaintext",
			plaintext: []byte{},
			key:       key,
			wantErr:   true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			encryptedBase64, err := EncryptToBase64(tt.plaintext, tt.key)

			if tt.wantErr {
				require.Error(t, err)
				assert.Empty(t, encryptedBase64)
			} else {
				require.NoError(t, err)
				assert.NotEmpty(t, encryptedBase64)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π Base64
				assert.Regexp(t, "^[A-Za-z0-9+/]+=*$", encryptedBase64,
					"—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º Base64")
			}
		})
	}
}

func TestDecryptFromBase64(t *testing.T) {
	key := make([]byte, 32)
	_, _ = rand.Read(key)
	plaintext := []byte("test message")

	// –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Base64
	validEncryptedBase64, err := EncryptToBase64(plaintext, key)
	require.NoError(t, err)

	tests := []struct {
		name            string
		encryptedBase64 string
		errMsg          string
		key             []byte
		wantErr         bool
	}{
		{
			name:            "successful decryption from base64",
			encryptedBase64: validEncryptedBase64,
			key:             key,
			wantErr:         false,
		},
		{
			name:            "invalid base64",
			encryptedBase64: "invalid-base64!!!",
			key:             key,
			wantErr:         true,
			errMsg:          "failed to decode base64",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			decrypted, err := DecryptFromBase64(tt.encryptedBase64, tt.key)

			if tt.wantErr {
				require.Error(t, err)
				assert.Contains(t, err.Error(), tt.errMsg)
				assert.Nil(t, decrypted)
			} else {
				require.NoError(t, err)
				assert.Equal(t, plaintext, decrypted)
			}
		})
	}
}

func TestEncryptDecryptBase64_Integration(t *testing.T) {
	// –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: Encrypt -> Base64 -> Decrypt
	key := make([]byte, 32)
	_, _ = rand.Read(key)
	plaintext := []byte("Hello, World!")

	// –®–∏—Ñ—Ä—É–µ–º –≤ Base64
	encryptedBase64, err := EncryptToBase64(plaintext, key)
	require.NoError(t, err)

	// –î–µ—à–∏—Ñ—Ä—É–µ–º –∏–∑ Base64
	decrypted, err := DecryptFromBase64(encryptedBase64, key)
	require.NoError(t, err)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	assert.Equal(t, plaintext, decrypted)
}
